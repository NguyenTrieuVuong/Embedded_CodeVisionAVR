
AVRASM ver. 2.1.30  E:\CodeVisionAVR\TWI\Debug\List\twi.asm Tue May 23 15:41:23 2023

E:\CodeVisionAVR\TWI\Debug\List\twi.asm(1420): warning: Register r3 already defined by the .DEF directive
E:\CodeVisionAVR\TWI\Debug\List\twi.asm(1421): warning: Register r4 already defined by the .DEF directive
E:\CodeVisionAVR\TWI\Debug\List\twi.asm(1422): warning: Register r5 already defined by the .DEF directive
E:\CodeVisionAVR\TWI\Debug\List\twi.asm(1423): warning: Register r6 already defined by the .DEF directive
E:\CodeVisionAVR\TWI\Debug\List\twi.asm(1424): warning: Register r7 already defined by the .DEF directive
E:\CodeVisionAVR\TWI\Debug\List\twi.asm(1425): warning: Register r8 already defined by the .DEF directive
E:\CodeVisionAVR\TWI\Debug\List\twi.asm(1426): warning: Register r9 already defined by the .DEF directive
E:\CodeVisionAVR\TWI\Debug\List\twi.asm(1427): warning: Register r10 already defined by the .DEF directive
E:\CodeVisionAVR\TWI\Debug\List\twi.asm(1428): warning: Register r11 already defined by the .DEF directive
E:\CodeVisionAVR\TWI\Debug\List\twi.asm(1429): warning: Register r12 already defined by the .DEF directive
E:\CodeVisionAVR\TWI\Debug\List\twi.asm(1430): warning: Register r13 already defined by the .DEF directive
E:\CodeVisionAVR\TWI\Debug\List\twi.asm(1431): warning: Register r14 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.51 Evaluation
                 ;(C) Copyright 1998-2023 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega328P
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega328P
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPMCSR=0x37
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x08FF
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.EQU __FLASH_PAGE_SIZE=0x40
                 	.EQU __EEPROM_PAGE_SIZE=0x04
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _i=R3
                 	.DEF _i_msb=R4
                 	.DEF _UART_Rx_Index=R5
                 	.DEF _UART_Rx_Index_msb=R6
                 	.DEF _UART_Data_In=R7
                 	.DEF _UART_Data_In_msb=R8
                 	.DEF _TWI_Rx_Index=R9
                 	.DEF _TWI_Rx_Index_msb=R10
                 	.DEF _TWI_Tx_Index=R11
                 	.DEF _TWI_Tx_Index_msb=R12
                 	.DEF _TWI_Data_In=R13
                 	.DEF _TWI_Data_In_msb=R14
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 00df 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0232 	JMP  _usart_rx_isr
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0254 	JMP  _TWI_isr
000032 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 0000
000035 0000      	.DB  0x0,0x0,0x0,0x0
000036 0000
000037 0000      	.DB  0x0,0x0,0x0,0x0
000038 0000      	.DB  0x0,0x0
                 
                 _0x30:
000039 0201
00003a 0403      	.DB  0x1,0x2,0x3,0x4
                 _0x0:
00003b 7453
00003c 7261
00003d 2074
00003e 6573      	.DB  0x53,0x74,0x61,0x72,0x74,0x20,0x73,0x65
00003f 746e
000040 2e2e
000041 0a2e
000042 5300      	.DB  0x6E,0x74,0x2E,0x2E,0x2E,0xA,0x0,0x53
000043 6174
000044 7574
000045 2073
000046 6f43      	.DB  0x74,0x61,0x74,0x75,0x73,0x20,0x43,0x6F
000047 6564
000048 203a
000049 5300
00004a 414c      	.DB  0x64,0x65,0x3A,0x20,0x0,0x53,0x4C,0x41
00004b 2b20
00004c 7220
00004d 2077
00004e 6573      	.DB  0x20,0x2B,0x20,0x72,0x77,0x20,0x73,0x65
00004f 746e
000050 2e20
000051 2e2e
000052 000a      	.DB  0x6E,0x74,0x20,0x2E,0x2E,0x2E,0xA,0x0
000053 7942
000054 6574
000055 7320
000056 6e65      	.DB  0x42,0x79,0x74,0x65,0x20,0x73,0x65,0x6E
000057 2e74
000058 2e2e
000059 000a
00005a 774f      	.DB  0x74,0x2E,0x2E,0x2E,0xA,0x0,0x4F,0x77
00005b 206e
00005c 6461
00005d 7264
00005e 7365      	.DB  0x6E,0x20,0x61,0x64,0x64,0x72,0x65,0x73
00005f 2073
000060 616d
000061 6374
000062 2068      	.DB  0x73,0x20,0x6D,0x61,0x74,0x63,0x68,0x20
000063 202b
000064 2057
000065 000a
000066 6552      	.DB  0x2B,0x20,0x57,0x20,0xA,0x0,0x52,0x65
000067 6563
000068 7669
000069 2065
00006a 2061      	.DB  0x63,0x65,0x69,0x76,0x65,0x20,0x61,0x20
00006b 7962
00006c 6574
00006d 202c
00006e 6573      	.DB  0x62,0x79,0x74,0x65,0x2C,0x20,0x73,0x65
00006f 746e
000070 4120
000071 4b43
000072 0a20      	.DB  0x6E,0x74,0x20,0x41,0x43,0x4B,0x20,0xA
000073 5200
000074 6365
000075 6965
000076 6576      	.DB  0x0,0x52,0x65,0x63,0x65,0x69,0x76,0x65
000077 6120
000078 6220
000079 7479
00007a 2c65      	.DB  0x20,0x61,0x20,0x62,0x79,0x74,0x65,0x2C
00007b 7320
00007c 6e65
00007d 2074
00007e 414e      	.DB  0x20,0x73,0x65,0x6E,0x74,0x20,0x4E,0x41
00007f 4b43
000080 0a20
000081 5200
000082 6365      	.DB  0x43,0x4B,0x20,0xA,0x0,0x52,0x65,0x63
000083 6965
000084 6576
000085 5320
000086 6f74      	.DB  0x65,0x69,0x76,0x65,0x20,0x53,0x74,0x6F
000087 2070
000088 6f63
000089 646e
00008a 7469      	.DB  0x70,0x20,0x63,0x6F,0x6E,0x64,0x69,0x74
00008b 6f69
00008c 206e
00008d 000a
00008e 6144      	.DB  0x69,0x6F,0x6E,0x20,0xA,0x0,0x44,0x61
00008f 6174
000090 7220
000091 6365
000092 6965      	.DB  0x74,0x61,0x20,0x72,0x65,0x63,0x65,0x69
000093 6576
000094 2064
000095 7266
000096 6d6f      	.DB  0x76,0x65,0x64,0x20,0x66,0x72,0x6F,0x6D
000097 5520
000098 5241
000099 2054
00009a 203a      	.DB  0x20,0x55,0x41,0x52,0x54,0x20,0x3A,0x20
00009b 4400
00009c 7461
00009d 2061
00009e 6572      	.DB  0x0,0x44,0x61,0x74,0x61,0x20,0x72,0x65
00009f 6563
0000a0 7669
0000a1 6465
0000a2 6620      	.DB  0x63,0x65,0x69,0x76,0x65,0x64,0x20,0x66
0000a3 6f72
0000a4 206d
0000a5 5754
0000a6 3a49      	.DB  0x72,0x6F,0x6D,0x20,0x54,0x57,0x49,0x3A
0000a7 0020      	.DB  0x20,0x0
                 
                 __GLOBAL_INI_TBL:
0000a8 000a      	.DW  0x0A
0000a9 0005      	.DW  0x05
0000aa 0068      	.DW  __REG_VARS*2
                 
0000ab 000f      	.DW  0x0F
0000ac 0300      	.DW  _0x13
0000ad 0076      	.DW  _0x0*2
                 
0000ae 000e      	.DW  0x0E
0000af 030f      	.DW  _0x13+15
0000b0 0085      	.DW  _0x0*2+15
                 
0000b1 0002      	.DW  0x02
0000b2 031d      	.DW  _0x13+29
0000b3 0083      	.DW  _0x0*2+13
                 
0000b4 0013      	.DW  0x13
0000b5 031f      	.DW  _0x17
0000b6 0093      	.DW  _0x0*2+29
                 
0000b7 000e      	.DW  0x0E
0000b8 0332      	.DW  _0x17+19
0000b9 0085      	.DW  _0x0*2+15
                 
0000ba 0002      	.DW  0x02
0000bb 0340      	.DW  _0x17+33
0000bc 0083      	.DW  _0x0*2+13
                 
0000bd 000e      	.DW  0x0E
0000be 0342      	.DW  _0x1B
0000bf 00a6      	.DW  _0x0*2+48
                 
0000c0 000e      	.DW  0x0E
0000c1 0350      	.DW  _0x1B+14
0000c2 0085      	.DW  _0x0*2+15
                 
0000c3 0002      	.DW  0x02
0000c4 035e      	.DW  _0x1B+28
0000c5 0083      	.DW  _0x0*2+13
                 
0000c6 0018      	.DW  0x18
0000c7 0360      	.DW  _0x36
0000c8 00b4      	.DW  _0x0*2+62
                 
0000c9 001b      	.DW  0x1B
0000ca 0378      	.DW  _0x36+24
0000cb 00cc      	.DW  _0x0*2+86
                 
0000cc 001c      	.DW  0x1C
0000cd 0393      	.DW  _0x36+51
0000ce 00e7      	.DW  _0x0*2+113
                 
0000cf 0019      	.DW  0x19
0000d0 03af      	.DW  _0x36+79
0000d1 0103      	.DW  _0x0*2+141
                 
0000d2 001b      	.DW  0x1B
0000d3 03c8      	.DW  _0x4F
0000d4 011c      	.DW  _0x0*2+166
                 
0000d5 0002      	.DW  0x02
0000d6 03e3      	.DW  _0x4F+27
0000d7 0083      	.DW  _0x0*2+13
                 
0000d8 0019      	.DW  0x19
0000d9 03e5      	.DW  _0x4F+29
0000da 0137      	.DW  _0x0*2+193
                 
0000db 0002      	.DW  0x02
0000dc 03fe      	.DW  _0x4F+54
0000dd 0083      	.DW  _0x0*2+13
                 
                 _0xFFFFFFFF:
0000de 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0000df 94f8      	CLI
0000e0 27ee      	CLR  R30
0000e1 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000e2 e0f1      	LDI  R31,1
0000e3 bff5      	OUT  MCUCR,R31
0000e4 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
0000e5 e08d      	LDI  R24,(14-2)+1
0000e6 e0a2      	LDI  R26,2
0000e7 27bb      	CLR  R27
                 __CLEAR_REG:
0000e8 93ed      	ST   X+,R30
0000e9 958a      	DEC  R24
0000ea f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000eb e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000ec e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000ed e0a0      	LDI  R26,LOW(__SRAM_START)
0000ee e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
0000ef 93ed      	ST   X+,R30
0000f0 9701      	SBIW R24,1
0000f1 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000f2 e5e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000f3 e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000f4 9185      	LPM  R24,Z+
0000f5 9195      	LPM  R25,Z+
0000f6 9700      	SBIW R24,0
0000f7 f061      	BREQ __GLOBAL_INI_END
0000f8 91a5      	LPM  R26,Z+
0000f9 91b5      	LPM  R27,Z+
0000fa 9005      	LPM  R0,Z+
0000fb 9015      	LPM  R1,Z+
0000fc 01bf      	MOVW R22,R30
0000fd 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000fe 9005      	LPM  R0,Z+
0000ff 920d      	ST   X+,R0
000100 9701      	SBIW R24,1
000101 f7e1      	BRNE __GLOBAL_INI_LOOP
000102 01fb      	MOVW R30,R22
000103 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
000104 e0e0      	LDI  R30,__GPIOR0_INIT
000105 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000106 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000107 bfed      	OUT  SPL,R30
000108 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000109 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00010a e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00010b e0d3      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00010c 940c 02e2 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x300
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 
                 	.CSEG
                 _uart_init:
                 ; .FSTART _uart_init
00010e 93ba      	ST   -Y,R27
00010f 93aa      	ST   -Y,R26
000110 931a      	ST   -Y,R17
000111 930a      	ST   -Y,R16
                 ;	BAUDRATE -> Y+2
                 ;	n -> R16,R17
000112 81ea      	LDD  R30,Y+2
000113 81fb      	LDD  R31,Y+2+1
000114 2766      	CLR  R22
000115 2777      	CLR  R23
000116 d225      	RCALL SUBOPT_0x0
000117 01df      	MOVW R26,R30
000118 01cb      	MOVW R24,R22
                +
000119 e1e0     +LDI R30 , LOW ( 0x10 )
00011a e0f0     +LDI R31 , HIGH ( 0x10 )
00011b e060     +LDI R22 , BYTE3 ( 0x10 )
00011c e070     +LDI R23 , BYTE4 ( 0x10 )
                 	__GETD1N 0x10
00011d d2c8      	RCALL __DIVD21
00011e 9731      	SBIW R30,1
00011f 018f      	MOVW R16,R30
000120 9310 00c5 	STS  197,R17
000122 9300 00c4 	STS  196,R16
000124 e0e6      	LDI  R30,LOW(6)
000125 93e0 00c2 	STS  194,R30
000127 e9e8      	LDI  R30,LOW(152)
000128 93e0 00c1 	STS  193,R30
00012a 9478      	SEI
00012b 8119      	LDD  R17,Y+1
00012c 8108      	LDD  R16,Y+0
00012d 9624      	ADIW R28,4
00012e 9508      	RET
                 ; .FEND
                 _uart_putchar:
                 ; .FSTART _uart_putchar
00012f 931a      	ST   -Y,R17
000130 2f1a      	MOV  R17,R26
                 ;	data -> R17
                 _0x3:
000131 91e0 00c0 	LDS  R30,192
000133 72e0      	ANDI R30,LOW(0x20)
000134 f3e1      	BREQ _0x3
000135 9310 00c6 	STS  198,R17
000137 c0bc      	RJMP _0x2000004
                 ; .FEND
                 _uart_putstring:
                 ; .FSTART _uart_putstring
000138 931a      	ST   -Y,R17
000139 930a      	ST   -Y,R16
00013a 018d      	MOVW R16,R26
                 ;	*str -> R16,R17
                 _0x6:
00013b 01d8      	MOVW R26,R16
00013c 91ec      	LD   R30,X
00013d 30e0      	CPI  R30,0
00013e f059      	BREQ _0x8
00013f 91ac      	LD   R26,X
000140 dfee      	RCALL _uart_putchar
000141 01d8      	MOVW R26,R16
000142 91ac      	LD   R26,X
000143 30aa      	CPI  R26,LOW(0xA)
000144 f411      	BRNE _0x9
000145 e0ad      	LDI  R26,LOW(13)
000146 dfe8      	RCALL _uart_putchar
                 _0x9:
                +
000147 5f0f     +SUBI R16 , LOW ( - 1 )
000148 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000149 cff1      	RJMP _0x6
                 _0x8:
00014a 9109      	LD   R16,Y+
00014b 9119      	LD   R17,Y+
00014c 9508      	RET
                 ; .FEND
                 _uart_put_int:
                 ; .FSTART _uart_put_int
00014d 93ba      	ST   -Y,R27
00014e 93aa      	ST   -Y,R26
00014f 9728      	SBIW R28,8
000150 d22f      	RCALL __SAVELOCR6
                 ;	value -> Y+14
                 ;	buf -> Y+6
                 ;	index -> R16,R17
                 ;	i -> R18,R19
                 ;	j -> R20,R21
                +
000151 e000     +LDI R16 , LOW ( 0 )
000152 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
000153 854e     +LDD R20 , Y + 14
000154 855f     +LDD R21 , Y + 14 + 1
                 	__GETWRS 20,21,14
                 _0xB:
000155 01f8      	MOVW R30,R16
000156 01de      	MOVW R26,R28
000157 9616      	ADIW R26,6
000158 0fea      	ADD  R30,R26
000159 1ffb      	ADC  R31,R27
00015a 01bf      	MOVW R22,R30
00015b 01da      	MOVW R26,R20
00015c e0ea      	LDI  R30,LOW(10)
00015d e0f0      	LDI  R31,HIGH(10)
00015e d28c      	RCALL __MODW21
00015f 5de0      	SUBI R30,-LOW(48)
000160 01db      	MOVW R26,R22
000161 93ec      	ST   X,R30
000162 01da      	MOVW R26,R20
000163 e0ea      	LDI  R30,LOW(10)
000164 e0f0      	LDI  R31,HIGH(10)
000165 d257      	RCALL __DIVW21
000166 01af      	MOVW R20,R30
                +
000167 5f0f     +SUBI R16 , LOW ( - 1 )
000168 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000169 2e04      	MOV  R0,R20
00016a 2a05      	OR   R0,R21
00016b f749      	BRNE _0xB
00016c 0198      	MOVW R18,R16
                 _0xE:
00016d 2400      	CLR  R0
00016e 1602      	CP   R0,R18
00016f 0603      	CPC  R0,R19
000170 f45c      	BRGE _0xF
000171 01f9      	MOVW R30,R18
000172 9731      	SBIW R30,1
000173 01de      	MOVW R26,R28
000174 9616      	ADIW R26,6
000175 0fae      	ADD  R26,R30
000176 1fbf      	ADC  R27,R31
000177 91ac      	LD   R26,X
000178 dfb6      	RCALL _uart_putchar
                +
000179 5021     +SUBI R18 , LOW ( 1 )
00017a 4030     +SBCI R19 , HIGH ( 1 )
                 	__SUBWRN 18,19,1
00017b cff1      	RJMP _0xE
                 _0xF:
00017c d20a      	RCALL __LOADLOCR6
00017d 9660      	ADIW R28,16
00017e 9508      	RET
                 ; .FEND
                 _TWI_Init:
                 ; .FSTART _TWI_Init
00017f d202      	RCALL __SAVELOCR4
000180 2f1a      	MOV  R17,R26
000181 810c      	LDD  R16,Y+4
000182 813d      	LDD  R19,Y+5
                 ;	sla -> R19
                 ;	gcall -> R16
                 ;	sclock -> R17
000183 2fe3      	MOV  R30,R19
000184 0fee      	LSL  R30
000185 0fe0      	ADD  R30,R16
000186 93e0 00ba 	STS  186,R30
000188 91e0 00b9 	LDS  R30,185
00018a 7fec      	ANDI R30,LOW(0xFC)
00018b 93e0 00b9 	STS  185,R30
00018d 2fe1      	MOV  R30,R17
00018e e0f0      	LDI  R31,0
                +
00018f 2f6f     +MOV R22 , R31
000190 0f66     +ADD R22 , R22
000191 0b66     +SBC R22 , R22
000192 2f76     +MOV R23 , R22
                 	__CWD1
000193 d1a8      	RCALL SUBOPT_0x0
                +
000194 51e0     +SUBI R30 , LOW ( 16 )
000195 40f0     +SBCI R31 , HIGH ( 16 )
000196 4060     +SBCI R22 , BYTE3 ( 16 )
000197 4070     +SBCI R23 , BYTE4 ( 16 )
                 	__SUBD1N 16
000198 01df      	MOVW R26,R30
000199 01cb      	MOVW R24,R22
                +
00019a e0e2     +LDI R30 , LOW ( 0x2 )
00019b e0f0     +LDI R31 , HIGH ( 0x2 )
00019c e060     +LDI R22 , BYTE3 ( 0x2 )
00019d e070     +LDI R23 , BYTE4 ( 0x2 )
                 	__GETD1N 0x2
00019e d247      	RCALL __DIVD21
00019f 93e0 00b8 	STS  184,R30
0001a1 e4e5      	LDI  R30,LOW(69)
0001a2 93e0 00bc 	STS  188,R30
0001a4 c067      	RJMP _0x2000003
                 ; .FEND
                 _TWI_Interupt_Enable:
                 ; .FSTART _TWI_Interupt_Enable
0001a5 91e0 00bc 	LDS  R30,188
0001a7 60e1      	ORI  R30,1
0001a8 c016      	RJMP _0x2000005
                 ; .FEND
                 _TWI_Interupt_Disable:
                 ; .FSTART _TWI_Interupt_Disable
0001a9 91e0 00bc 	LDS  R30,188
0001ab 7fee      	ANDI R30,0xFE
0001ac c012      	RJMP _0x2000005
                 ; .FEND
                 _TWI_Start:
                 ; .FSTART _TWI_Start
0001ad eae4      	LDI  R30,LOW(164)
0001ae 93e0 00bc 	STS  188,R30
                 _0x10:
0001b0 91e0 00bc 	LDS  R30,188
0001b2 78e0      	ANDI R30,LOW(0x80)
0001b3 f3e1      	BREQ _0x10
                +
0001b4 e0a0     +LDI R26 , LOW ( _0x13 + ( 0 ) )
0001b5 e0b3     +LDI R27 , HIGH ( _0x13 + ( 0 ) )
                 	__POINTW2MN _0x13,0
0001b6 df81      	RCALL _uart_putstring
                +
0001b7 e0af     +LDI R26 , LOW ( _0x13 + ( 15 ) )
0001b8 e0b3     +LDI R27 , HIGH ( _0x13 + ( 15 ) )
                 	__POINTW2MN _0x13,15
0001b9 d188      	RCALL SUBOPT_0x1
                +
0001ba e1ad     +LDI R26 , LOW ( _0x13 + ( 29 ) )
0001bb e0b3     +LDI R27 , HIGH ( _0x13 + ( 29 ) )
                 	__POINTW2MN _0x13,29
0001bc d18d      	RCALL SUBOPT_0x2
0001bd 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x13:
000300           	.BYTE 0x1F
                 
                 	.CSEG
                 _TWI_Stop:
                 ; .FSTART _TWI_Stop
0001be e9e4      	LDI  R30,LOW(148)
                 _0x2000005:
0001bf 93e0 00bc 	STS  188,R30
0001c1 9508      	RET
                 ; .FEND
                 _TWI_SLA_RW:
                 ; .FSTART _TWI_SLA_RW
0001c2 931a      	ST   -Y,R17
0001c3 930a      	ST   -Y,R16
0001c4 2f1a      	MOV  R17,R26
0001c5 810a      	LDD  R16,Y+2
                 ;	add -> R16
                 ;	rw -> R17
0001c6 2fe1      	MOV  R30,R17
0001c7 5fef      	SUBI R30,-LOW(1)
0001c8 2fa0      	MOV  R26,R16
0001c9 d1d8      	RCALL __LSLB12
0001ca 93e0 00bb 	STS  187,R30
0001cc e8e4      	LDI  R30,LOW(132)
0001cd 93e0 00bc 	STS  188,R30
                 _0x14:
0001cf 91e0 00bc 	LDS  R30,188
0001d1 78e0      	ANDI R30,LOW(0x80)
0001d2 f3e1      	BREQ _0x14
                +
0001d3 e1af     +LDI R26 , LOW ( _0x17 + ( 0 ) )
0001d4 e0b3     +LDI R27 , HIGH ( _0x17 + ( 0 ) )
                 	__POINTW2MN _0x17,0
0001d5 df62      	RCALL _uart_putstring
                +
0001d6 e3a2     +LDI R26 , LOW ( _0x17 + ( 19 ) )
0001d7 e0b3     +LDI R27 , HIGH ( _0x17 + ( 19 ) )
                 	__POINTW2MN _0x17,19
0001d8 d169      	RCALL SUBOPT_0x1
                +
0001d9 e4a0     +LDI R26 , LOW ( _0x17 + ( 33 ) )
0001da e0b3     +LDI R27 , HIGH ( _0x17 + ( 33 ) )
                 	__POINTW2MN _0x17,33
0001db d16e      	RCALL SUBOPT_0x2
0001dc 8119      	LDD  R17,Y+1
0001dd 8108      	LDD  R16,Y+0
0001de 9623      	ADIW R28,3
0001df 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x17:
00031f           	.BYTE 0x23
                 
                 	.CSEG
                 _TWI_Send_Byte:
                 ; .FSTART _TWI_Send_Byte
0001e0 931a      	ST   -Y,R17
0001e1 2f1a      	MOV  R17,R26
                 ;	b -> R17
0001e2 9310 00bb 	STS  187,R17
0001e4 e8e4      	LDI  R30,LOW(132)
0001e5 93e0 00bc 	STS  188,R30
                 _0x18:
0001e7 91e0 00bc 	LDS  R30,188
0001e9 78e0      	ANDI R30,LOW(0x80)
0001ea f3e1      	BREQ _0x18
                +
0001eb e4a2     +LDI R26 , LOW ( _0x1B + ( 0 ) )
0001ec e0b3     +LDI R27 , HIGH ( _0x1B + ( 0 ) )
                 	__POINTW2MN _0x1B,0
0001ed df4a      	RCALL _uart_putstring
                +
0001ee e5a0     +LDI R26 , LOW ( _0x1B + ( 14 ) )
0001ef e0b3     +LDI R27 , HIGH ( _0x1B + ( 14 ) )
                 	__POINTW2MN _0x1B,14
0001f0 d151      	RCALL SUBOPT_0x1
                +
0001f1 e5ae     +LDI R26 , LOW ( _0x1B + ( 28 ) )
0001f2 e0b3     +LDI R27 , HIGH ( _0x1B + ( 28 ) )
                 	__POINTW2MN _0x1B,28
0001f3 d156      	RCALL SUBOPT_0x2
                 _0x2000004:
0001f4 9119      	LD   R17,Y+
0001f5 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x1B:
000342           	.BYTE 0x1E
                 
                 	.CSEG
                 _TWI_Send_Array:
                 ; .FSTART _TWI_Send_Array
0001f6 d18b      	RCALL __SAVELOCR4
0001f7 018d      	MOVW R16,R26
                +
0001f8 812c     +LDD R18 , Y + 4
0001f9 813d     +LDD R19 , Y + 4 + 1
                 	__GETWRS 18,19,4
                 ;	*arr -> R18,R19
                 ;	length -> R16,R17
0001fa 2433      	CLR  R3
0001fb 2444      	CLR  R4
                 _0x1D:
                +
0001fc 1630     +CP R3 , R16
0001fd 0641     +CPC R4 , R17
                 	__CPWRR 3,4,16,17
0001fe f454      	BRGE _0x1E
                +
0001ff 2de3     +MOV R30 , R3
000200 2df4     +MOV R31 , R4
                 	__GETW1R 3,4
000201 0fe2      	ADD  R30,R18
000202 1ff3      	ADC  R31,R19
000203 81a0      	LD   R26,Z
000204 dfdb      	RCALL _TWI_Send_Byte
000205 32e8      	CPI  R30,LOW(0x28)
000206 f411      	BRNE _0x2000002
000207 d147      	RCALL SUBOPT_0x3
000208 cff3      	RJMP _0x1D
                 _0x1E:
                 _0x2000002:
000209 91e0 00b9 	LDS  R30,185
00020b 7fe8      	ANDI R30,LOW(0xF8)
                 _0x2000003:
00020c d17c      	RCALL __LOADLOCR4
00020d 9626      	ADIW R28,6
00020e 9508      	RET
                 ; .FEND
                 _TWI_Error:
                 ; .FSTART _TWI_Error
00020f dfae      	RCALL _TWI_Stop
000210 df94      	RCALL _TWI_Interupt_Enable
000211 9508      	RET
                 ; .FEND
                 _TWI_Master_Send:
                 ; .FSTART _TWI_Master_Send
000212 d16d      	RCALL __SAVELOCR6
000213 018d      	MOVW R16,R26
                +
000214 812e     +LDD R18 , Y + 6
000215 813f     +LDD R19 , Y + 6 + 1
                 	__GETWRS 18,19,6
000216 8558      	LDD  R21,Y+8
                 ;	sla -> R21
                 ;	*arr -> R18,R19
                 ;	length -> R16,R17
000217 df91      	RCALL _TWI_Interupt_Disable
000218 df94      	RCALL _TWI_Start
000219 30e8      	CPI  R30,LOW(0x8)
00021a f011      	BREQ _0x20
00021b e0e1      	LDI  R30,LOW(1)
00021c c012      	RJMP _0x2000001
                 _0x20:
00021d 935a      	ST   -Y,R21
00021e e0a0      	LDI  R26,LOW(0)
00021f dfa2      	RCALL _TWI_SLA_RW
000220 31e8      	CPI  R30,LOW(0x18)
000221 f011      	BREQ _0x21
000222 e0e1      	LDI  R30,LOW(1)
000223 c00b      	RJMP _0x2000001
                 _0x21:
000224 933a      	ST   -Y,R19
000225 932a      	ST   -Y,R18
000226 01d8      	MOVW R26,R16
000227 dfce      	RCALL _TWI_Send_Array
000228 32e8      	CPI  R30,LOW(0x28)
000229 f011      	BREQ _0x22
00022a e0e1      	LDI  R30,LOW(1)
00022b c003      	RJMP _0x2000001
                 _0x22:
00022c df91      	RCALL _TWI_Stop
00022d df77      	RCALL _TWI_Interupt_Enable
00022e e0e0      	LDI  R30,LOW(0)
                 _0x2000001:
00022f d157      	RCALL __LOADLOCR6
000230 9629      	ADIW R28,9
000231 9508      	RET
                 ; .FEND
                 ;	sla -> R21
                 ;	*arr -> R18,R19
                 ;	length -> R16,R17
                 
                 	.DSEG
                 ;interrupt [19] void usart_rx_isr(void) {
                 ; 0000 001C interrupt [19] void usart_rx_isr(void) {
                 
                 	.CSEG
                 _usart_rx_isr:
                 ; .FSTART _usart_rx_isr
000232 93aa      	ST   -Y,R26
000233 93ba      	ST   -Y,R27
000234 93ea      	ST   -Y,R30
000235 93fa      	ST   -Y,R31
000236 b7ef      	IN   R30,SREG
000237 93ea      	ST   -Y,R30
                 ; 0000 001D UART_Data_In = 1;
000238 e0e1      	LDI  R30,LOW(1)
000239 e0f0      	LDI  R31,HIGH(1)
                +
00023a 2e7e     +MOV R7 , R30
00023b 2e8f     +MOV R8 , R31
                 	__PUTW1R 7,8
                 ; 0000 001E if (UART_Rx_Index <50){
00023c e3e2      	LDI  R30,LOW(50)
00023d e0f0      	LDI  R31,HIGH(50)
00023e 165e      	CP   R5,R30
00023f 066f      	CPC  R6,R31
000240 f464      	BRGE _0x31
                 ; 0000 001F UART_Rx_Buf[UART_Rx_Index++] = UDR0;
                +
000241 2de5     +MOV R30 , R5
000242 2df6     +MOV R31 , R6
                 	__GETW1R 5,6
000243 9631      	ADIW R30,1
                +
000244 2e5e     +MOV R5 , R30
000245 2e6f     +MOV R6 , R31
                 	__PUTW1R 5,6
000246 9731      	SBIW R30,1
000247 59ec      	SUBI R30,LOW(-_UART_Rx_Buf)
000248 4ffb      	SBCI R31,HIGH(-_UART_Rx_Buf)
000249 01df      	MOVW R26,R30
00024a 91e0 00c6 	LDS  R30,198
00024c 93ec      	ST   X,R30
                 ; 0000 0020 }
                 ; 0000 0021 }
                 _0x31:
00024d 91e9      	LD   R30,Y+
00024e bfef      	OUT  SREG,R30
00024f 91f9      	LD   R31,Y+
000250 91e9      	LD   R30,Y+
000251 91b9      	LD   R27,Y+
000252 91a9      	LD   R26,Y+
000253 9518      	RETI
                 ; .FEND
                 ;interrupt [25] void TWI_isr(void){
                 ; 0000 0025 interrupt [25] void TWI_isr(void){
                 _TWI_isr:
                 ; .FSTART _TWI_isr
000254 920a      	ST   -Y,R0
000255 921a      	ST   -Y,R1
000256 92fa      	ST   -Y,R15
000257 936a      	ST   -Y,R22
000258 937a      	ST   -Y,R23
000259 938a      	ST   -Y,R24
00025a 939a      	ST   -Y,R25
00025b 93aa      	ST   -Y,R26
00025c 93ba      	ST   -Y,R27
00025d 93ea      	ST   -Y,R30
00025e 93fa      	ST   -Y,R31
00025f b7ef      	IN   R30,SREG
000260 93ea      	ST   -Y,R30
                 ; 0000 0026 Status_Code = TWSR;
000261 91e0 00b9 	LDS  R30,185
000263 93e0 0496 	STS  _Status_Code,R30
                 ; 0000 0027 switch (Status_Code){
000265 e0f0      	LDI  R31,0
                 ; 0000 0028 ////////////////////////////////////////////////////
                 ; 0000 0029 ///////////// Slave Receive Mode ///////////////////
                 ; 0000 002A case 0x60:                   //Own Address match + W, sent ACK
000266 36e0      	CPI  R30,LOW(0x60)
000267 e0a0      	LDI  R26,HIGH(0x60)
000268 07fa      	CPC  R31,R26
000269 f431      	BRNE _0x35
                 ; 0000 002B uart_putstring("Own address match + W \n");
                +
00026a e6a0     +LDI R26 , LOW ( _0x36 + ( 0 ) )
00026b e0b3     +LDI R27 , HIGH ( _0x36 + ( 0 ) )
                 	__POINTW2MN _0x36,0
00026c decb      	RCALL _uart_putstring
                 ; 0000 002C TWI_Rx_Index = 0;
00026d 2499      	CLR  R9
00026e 24aa      	CLR  R10
                 ; 0000 002D TWCR |= 0b11000000;     //Clear TWINT, set TWEA
00026f c05f      	RJMP _0x59
                 ; 0000 002E break;
                 ; 0000 002F case 0x80:                  //Received a byte, sent ACK
                 _0x35:
000270 38e0      	CPI  R30,LOW(0x80)
000271 e0a0      	LDI  R26,HIGH(0x80)
000272 07fa      	CPC  R31,R26
000273 f449      	BRNE _0x37
                 ; 0000 0030 
                 ; 0000 0031 uart_putstring("Receive a byte, sent ACK \n");
                +
000274 e7a8     +LDI R26 , LOW ( _0x36 + ( 24 ) )
000275 e0b3     +LDI R27 , HIGH ( _0x36 + ( 24 ) )
                 	__POINTW2MN _0x36,24
000276 dec1      	RCALL _uart_putstring
                 ; 0000 0032 if (TWI_Rx_Index<49){
000277 d0dc      	RCALL SUBOPT_0x4
000278 f414      	BRGE _0x38
                 ; 0000 0033 TWI_Rx_Buf[TWI_Rx_Index++] = TWDR;
000279 d0df      	RCALL SUBOPT_0x5
                 ; 0000 0034 TWCR |= 0b11000000;     //Clear TWINT, set TWEA
00027a c054      	RJMP _0x59
                 ; 0000 0035 break;
                 ; 0000 0036 }
                 ; 0000 0037 else {                  //Receive last byte
                 _0x38:
                 ; 0000 0038 TWI_Rx_Buf[TWI_Rx_Index] = TWDR;
00027b d0ea      	RCALL SUBOPT_0x6
                 ; 0000 0039 TWCR = 0b10000101;     //Clear TWINT, clear TWEA, send NACK
00027c c055      	RJMP _0x5A
                 ; 0000 003A break;
                 ; 0000 003B }
                 ; 0000 003C case 0x88:                  //Received a byte, sent NACK
                 _0x37:
00027d 38e8      	CPI  R30,LOW(0x88)
00027e e0a0      	LDI  R26,HIGH(0x88)
00027f 07fa      	CPC  R31,R26
000280 f409      	BRNE _0x3B
                 ; 0000 003D TWCR |= 0b11000000;     //Clear TWINT, set TWEA
000281 c04d      	RJMP _0x59
                 ; 0000 003E break;
                 ; 0000 003F // For General Call
                 ; 0000 0040 case 0x70:                  //General Call match + W, send ACK
                 _0x3B:
000282 37e0      	CPI  R30,LOW(0x70)
000283 e0a0      	LDI  R26,HIGH(0x70)
000284 07fa      	CPC  R31,R26
000285 f419      	BRNE _0x3C
                 ; 0000 0041 TWI_Rx_Index = 0;
000286 2499      	CLR  R9
000287 24aa      	CLR  R10
                 ; 0000 0042 TWCR |= 0b11000000;     //Clear TWINT, set TWEA
000288 c046      	RJMP _0x59
                 ; 0000 0043 break;
                 ; 0000 0044 case 0x90:                  //Received a byte, sent ACK
                 _0x3C:
000289 39e0      	CPI  R30,LOW(0x90)
00028a e0a0      	LDI  R26,HIGH(0x90)
00028b 07fa      	CPC  R31,R26
00028c f431      	BRNE _0x3D
                 ; 0000 0045 
                 ; 0000 0046 if (TWI_Rx_Index<49){
00028d d0c6      	RCALL SUBOPT_0x4
00028e f414      	BRGE _0x3E
                 ; 0000 0047 TWI_Rx_Buf[TWI_Rx_Index++] = TWDR;
00028f d0c9      	RCALL SUBOPT_0x5
                 ; 0000 0048 TWCR |= 0b11000000;     //Clear TWINT, set TWEA
000290 c03e      	RJMP _0x59
                 ; 0000 0049 break;
                 ; 0000 004A }
                 ; 0000 004B else {                  //Receive last byte
                 _0x3E:
                 ; 0000 004C TWI_Rx_Buf[TWI_Rx_Index] = TWDR;
000291 d0d4      	RCALL SUBOPT_0x6
                 ; 0000 004D TWCR = 0b10000101;     //Clear TWINT, clear TWEA, send NACK
000292 c03f      	RJMP _0x5A
                 ; 0000 004E break;
                 ; 0000 004F }
                 ; 0000 0050 case 0x98:                  //Received a byte, sent NACK
                 _0x3D:
000293 39e8      	CPI  R30,LOW(0x98)
000294 e0a0      	LDI  R26,HIGH(0x98)
000295 07fa      	CPC  R31,R26
000296 f421      	BRNE _0x41
                 ; 0000 0051 uart_putstring("Receive a byte, sent NACK \n");
                +
000297 e9a3     +LDI R26 , LOW ( _0x36 + ( 51 ) )
000298 e0b3     +LDI R27 , HIGH ( _0x36 + ( 51 ) )
                 	__POINTW2MN _0x36,51
000299 de9e      	RCALL _uart_putstring
                 ; 0000 0052 TWCR |= 0b11000000;     //Clear TWINT, set TWEA
00029a c034      	RJMP _0x59
                 ; 0000 0053 break;
                 ; 0000 0054 case 0xA0:                  //Received Stop condition or Restart
                 _0x41:
00029b 3ae0      	CPI  R30,LOW(0xA0)
00029c e0a0      	LDI  R26,HIGH(0xA0)
00029d 07fa      	CPC  R31,R26
00029e f441      	BRNE _0x42
                 ; 0000 0055 uart_putstring("Receive Stop condition \n");
                +
00029f eaaf     +LDI R26 , LOW ( _0x36 + ( 79 ) )
0002a0 e0b3     +LDI R27 , HIGH ( _0x36 + ( 79 ) )
                 	__POINTW2MN _0x36,79
0002a1 de96      	RCALL _uart_putstring
                 ; 0000 0056 TWI_Data_In = 1;
0002a2 e0e1      	LDI  R30,LOW(1)
0002a3 e0f0      	LDI  R31,HIGH(1)
                +
0002a4 2ede     +MOV R13 , R30
0002a5 2eef     +MOV R14 , R31
                 	__PUTW1R 13,14
                 ; 0000 0057 TWCR |= 0b11000000;     //Clear TWINT, set TWEA
0002a6 c028      	RJMP _0x59
                 ; 0000 0058 break;
                 ; 0000 0059 //////////////////////////////////////////////////////
                 ; 0000 005A ///////////// Slave Transmit Mode ///////////////////
                 ; 0000 005B case 0xA8:                  //Own Address match + R,  sent ACK
                 _0x42:
0002a7 3ae8      	CPI  R30,LOW(0xA8)
0002a8 e0a0      	LDI  R26,HIGH(0xA8)
0002a9 07fa      	CPC  R31,R26
0002aa f411      	BRNE _0x43
                 ; 0000 005C TWDR = TWI_Tx_Buf[TWI_Tx_Index++];
0002ab d0c3      	RCALL SUBOPT_0x7
                 ; 0000 005D TWCR |= 0b11000000;     //Clear TWINT, set TWEA
0002ac c022      	RJMP _0x59
                 ; 0000 005E break;
                 ; 0000 005F case 0xB8:                  //Sent data, received ACK
                 _0x43:
0002ad 3be8      	CPI  R30,LOW(0xB8)
0002ae e0a0      	LDI  R26,HIGH(0xB8)
0002af 07fa      	CPC  R31,R26
0002b0 f481      	BRNE _0x44
                 ; 0000 0060 if (TWI_Tx_Index < 49){
0002b1 e3e1      	LDI  R30,LOW(49)
0002b2 e0f0      	LDI  R31,HIGH(49)
0002b3 16be      	CP   R11,R30
0002b4 06cf      	CPC  R12,R31
0002b5 f414      	BRGE _0x45
                 ; 0000 0061 TWDR = TWI_Tx_Buf[TWI_Tx_Index++];
0002b6 d0b8      	RCALL SUBOPT_0x7
                 ; 0000 0062 TWCR |= 0b11000000;     //Clear TWINT, set TWEA
0002b7 c017      	RJMP _0x59
                 ; 0000 0063 break;
                 ; 0000 0064 }
                 ; 0000 0065 else {
                 _0x45:
                 ; 0000 0066 TWDR = TWI_Tx_Buf[TWI_Tx_Index];    //send last byte
0002b8 e3a2      	LDI  R26,LOW(_TWI_Tx_Buf)
0002b9 e0b4      	LDI  R27,HIGH(_TWI_Tx_Buf)
0002ba 0dab      	ADD  R26,R11
0002bb 1dbc      	ADC  R27,R12
0002bc 91ec      	LD   R30,X
0002bd 93e0 00bb 	STS  187,R30
                 ; 0000 0067 TWCR = 0b10000101;                  //Clear TWINT, Clear TWEA
0002bf e8e5      	LDI  R30,LOW(133)
0002c0 c011      	RJMP _0x5A
                 ; 0000 0068 break;
                 ; 0000 0069 }
                 ; 0000 006A case 0xB0:           //Lost arbitration, own address match+R, sent ACK
                 _0x44:
0002c1 3be0      	CPI  R30,LOW(0xB0)
0002c2 e0a0      	LDI  R26,HIGH(0xB0)
0002c3 07fa      	CPC  R31,R26
0002c4 f411      	BRNE _0x48
                 ; 0000 006B TWDR = TWI_Tx_Buf[TWI_Tx_Index++];
0002c5 d0a9      	RCALL SUBOPT_0x7
                 ; 0000 006C TWCR |= 0b11000000;     //Clear TWINT, set TWEA
0002c6 c008      	RJMP _0x59
                 ; 0000 006D break;
                 ; 0000 006E case 0xC0:                  //sent data byte, receive NACK
                 _0x48:
0002c7 3ce0      	CPI  R30,LOW(0xC0)
0002c8 e0a0      	LDI  R26,HIGH(0xC0)
0002c9 07fa      	CPC  R31,R26
0002ca f021      	BREQ _0x59
                 ; 0000 006F TWCR |= 0b11000000;     //Clear TWINT, set TWEA
                 ; 0000 0070 break;
                 ; 0000 0071 case 0xC8:                  //sent last data byte, receive ACK
0002cb 3ce8      	CPI  R30,LOW(0xC8)
0002cc e0a0      	LDI  R26,HIGH(0xC8)
0002cd 07fa      	CPC  R31,R26
0002ce f429      	BRNE _0x34
                 ; 0000 0072 TWCR |= 0b11000000;     //Clear TWINT, set TWEA
                 _0x59:
0002cf 91e0 00bc 	LDS  R30,188
0002d1 6ce0      	ORI  R30,LOW(0xC0)
                 _0x5A:
0002d2 93e0 00bc 	STS  188,R30
                 ; 0000 0073 break;
                 ; 0000 0074 }
                 _0x34:
                 ; 0000 0075 }
0002d4 91e9      	LD   R30,Y+
0002d5 bfef      	OUT  SREG,R30
0002d6 91f9      	LD   R31,Y+
0002d7 91e9      	LD   R30,Y+
0002d8 91b9      	LD   R27,Y+
0002d9 91a9      	LD   R26,Y+
0002da 9199      	LD   R25,Y+
0002db 9189      	LD   R24,Y+
0002dc 9179      	LD   R23,Y+
0002dd 9169      	LD   R22,Y+
0002de 90f9      	LD   R15,Y+
0002df 9019      	LD   R1,Y+
0002e0 9009      	LD   R0,Y+
0002e1 9518      	RETI
                 ; .FEND
                 
                 	.DSEG
                 _0x36:
000360           	.BYTE 0x68
                 ;void main(void)
                 ; 0000 0078 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0079 uart_init(9600);
0002e2 e8a0      	LDI  R26,LOW(9600)
0002e3 e2b5      	LDI  R27,HIGH(9600)
0002e4 de29      	RCALL _uart_init
                 ; 0000 007A TWI_Init(own_address, 1, 100000);
0002e5 e0e2      	LDI  R30,LOW(2)
0002e6 93ea      	ST   -Y,R30
0002e7 e0e1      	LDI  R30,LOW(1)
0002e8 93ea      	ST   -Y,R30
0002e9 eaa0      	LDI  R26,LOW(160)
0002ea de94      	RCALL _TWI_Init
                 ; 0000 007B while (1)
                 _0x4B:
                 ; 0000 007C {
                 ; 0000 007D //If receive data from UART, transfer them into TWI (Master transmit mode)
                 ; 0000 007E if (UART_Data_In) {
0002eb 2c07      	MOV  R0,R7
0002ec 2808      	OR   R0,R8
0002ed f161      	BREQ _0x4E
                 ; 0000 007F uart_putstring("Data received from UART : ");
                +
0002ee eca8     +LDI R26 , LOW ( _0x4F + ( 0 ) )
0002ef e0b3     +LDI R27 , HIGH ( _0x4F + ( 0 ) )
                 	__POINTW2MN _0x4F,0
0002f0 de47      	RCALL _uart_putstring
                 ; 0000 0080 uart_putstring(UART_Rx_Buf);
0002f1 e6a4      	LDI  R26,LOW(_UART_Rx_Buf)
0002f2 e0b4      	LDI  R27,HIGH(_UART_Rx_Buf)
0002f3 de44      	RCALL _uart_putstring
                 ; 0000 0081 uart_putstring("\n");
                +
0002f4 eea3     +LDI R26 , LOW ( _0x4F + ( 27 ) )
0002f5 e0b3     +LDI R27 , HIGH ( _0x4F + ( 27 ) )
                 	__POINTW2MN _0x4F,27
0002f6 de41      	RCALL _uart_putstring
                 ; 0000 0082 //Reset Rx_Buf
                 ; 0000 0083 for (i = 0; i<UART_Rx_Index;i++){
0002f7 2433      	CLR  R3
0002f8 2444      	CLR  R4
                 _0x51:
                +
0002f9 1435     +CP R3 , R5
0002fa 0446     +CPC R4 , R6
                 	__CPWRR 3,4,5,6
0002fb f474      	BRGE _0x52
                 ; 0000 0084 TWI_Tx_Buf[i] = UART_Rx_Buf[i];
                +
0002fc 2de3     +MOV R30 , R3
0002fd 2df4     +MOV R31 , R4
                 	__GETW1R 3,4
0002fe 5cee      	SUBI R30,LOW(-_TWI_Tx_Buf)
0002ff 4ffb      	SBCI R31,HIGH(-_TWI_Tx_Buf)
000300 010f      	MOVW R0,R30
000301 d079      	RCALL SUBOPT_0x8
000302 91ec      	LD   R30,X
000303 01d0      	MOVW R26,R0
000304 93ec      	ST   X,R30
                 ; 0000 0085 UART_Rx_Buf[i] = 0;
000305 d075      	RCALL SUBOPT_0x8
000306 e0e0      	LDI  R30,LOW(0)
000307 93ec      	ST   X,R30
                 ; 0000 0086 }
000308 d046      	RCALL SUBOPT_0x3
000309 cfef      	RJMP _0x51
                 _0x52:
                 ; 0000 0087 if (TWI_Master_Send(slave_address,TWI_Tx_Buf,UART_Rx_Index))
00030a e0e1      	LDI  R30,LOW(1)
00030b 93ea      	ST   -Y,R30
00030c e3e2      	LDI  R30,LOW(_TWI_Tx_Buf)
00030d e0f4      	LDI  R31,HIGH(_TWI_Tx_Buf)
00030e 93fa      	ST   -Y,R31
00030f 93ea      	ST   -Y,R30
                +
000310 2da5     +MOV R26 , R5
000311 2db6     +MOV R27 , R6
                 	__GETW2R 5,6
000312 deff      	RCALL _TWI_Master_Send
000313 30e0      	CPI  R30,0
000314 f009      	BREQ _0x53
                 ; 0000 0088 TWI_Error();
000315 def9      	RCALL _TWI_Error
                 ; 0000 0089 UART_Rx_Index = 0;
                 _0x53:
000316 2455      	CLR  R5
000317 2466      	CLR  R6
                 ; 0000 008A UART_Data_In = 0;
000318 2477      	CLR  R7
000319 2488      	CLR  R8
                 ; 0000 008B }
                 ; 0000 008C delay_ms(1000);
                 _0x4E:
00031a eea8      	LDI  R26,LOW(1000)
00031b e0b3      	LDI  R27,HIGH(1000)
00031c d0f6      	RCALL _delay_ms
                 ; 0000 008D 
                 ; 0000 008E //If receive data from TWI, transfer them into UART
                 ; 0000 008F if (TWI_Data_In){
00031d 2c0d      	MOV  R0,R13
00031e 280e      	OR   R0,R14
00031f f0d1      	BREQ _0x54
                 ; 0000 0090 uart_putstring("Data received from TWI: ");
                +
000320 eea5     +LDI R26 , LOW ( _0x4F + ( 29 ) )
000321 e0b3     +LDI R27 , HIGH ( _0x4F + ( 29 ) )
                 	__POINTW2MN _0x4F,29
000322 de15      	RCALL _uart_putstring
                 ; 0000 0091 uart_putstring(TWI_Rx_Buf);
000323 e0a0      	LDI  R26,LOW(_TWI_Rx_Buf)
000324 e0b4      	LDI  R27,HIGH(_TWI_Rx_Buf)
000325 de12      	RCALL _uart_putstring
                 ; 0000 0092 uart_putstring("\n");
                +
000326 efae     +LDI R26 , LOW ( _0x4F + ( 54 ) )
000327 e0b3     +LDI R27 , HIGH ( _0x4F + ( 54 ) )
                 	__POINTW2MN _0x4F,54
000328 de0f      	RCALL _uart_putstring
                 ; 0000 0093 for (i = 0; i<TWI_Rx_Index;i++)
000329 2433      	CLR  R3
00032a 2444      	CLR  R4
                 _0x56:
                +
00032b 1439     +CP R3 , R9
00032c 044a     +CPC R4 , R10
                 	__CPWRR 3,4,9,10
00032d f444      	BRGE _0x57
                 ; 0000 0094 TWI_Tx_Buf[i] = 0;
00032e e3a2      	LDI  R26,LOW(_TWI_Tx_Buf)
00032f e0b4      	LDI  R27,HIGH(_TWI_Tx_Buf)
000330 0da3      	ADD  R26,R3
000331 1db4      	ADC  R27,R4
000332 e0e0      	LDI  R30,LOW(0)
000333 93ec      	ST   X,R30
000334 d01a      	RCALL SUBOPT_0x3
000335 cff5      	RJMP _0x56
                 _0x57:
                 ; 0000 0095 TWI_Rx_Index = 0;
000336 2499      	CLR  R9
000337 24aa      	CLR  R10
                 ; 0000 0096 TWI_Data_In = 0;
000338 24dd      	CLR  R13
000339 24ee      	CLR  R14
                 ; 0000 0097 }
                 ; 0000 0098 }
                 _0x54:
00033a cfb0      	RJMP _0x4B
                 ; 0000 0099 }
                 _0x58:
00033b cfff      	RJMP _0x58
                 ; .FEND
                 
                 	.DSEG
                 _0x4F:
0003c8           	.BYTE 0x38
                 
                 	.DSEG
                 _TWI_Rx_Buf:
000400           	.BYTE 0x32
                 _TWI_Tx_Buf:
000432           	.BYTE 0x32
                 _UART_Rx_Buf:
000464           	.BYTE 0x32
                 _Status_Code:
000496           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x0:
                +
00033c e0a0     +LDI R26 , LOW ( 0xF42400 )
00033d e2b4     +LDI R27 , HIGH ( 0xF42400 )
00033e ef84     +LDI R24 , BYTE3 ( 0xF42400 )
00033f e090     +LDI R25 , BYTE4 ( 0xF42400 )
                 	__GETD2N 0xF42400
000340 d0a5      	RCALL __DIVD21
000341 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x1:
000342 ddf5      	RCALL _uart_putstring
000343 91e0 00b9 	LDS  R30,185
000345 e0f0      	LDI  R31,0
000346 7fe8      	ANDI R30,LOW(0xF8)
000347 70f0      	ANDI R31,HIGH(0xF8)
000348 01df      	MOVW R26,R30
000349 ce03      	RJMP _uart_put_int
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x2:
00034a dded      	RCALL _uart_putstring
00034b 91e0 00b9 	LDS  R30,185
00034d 7fe8      	ANDI R30,LOW(0xF8)
00034e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x3:
00034f e0e1      	LDI  R30,LOW(1)
000350 e0f0      	LDI  R31,HIGH(1)
                +
000351 0e3e     +ADD R3 , R30
000352 1e4f     +ADC R4 , R31
                 	__ADDWRR 3,4,30,31
000353 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
000354 e3e1      	LDI  R30,LOW(49)
000355 e0f0      	LDI  R31,HIGH(49)
000356 169e      	CP   R9,R30
000357 06af      	CPC  R10,R31
000358 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5:
                +
000359 2de9     +MOV R30 , R9
00035a 2dfa     +MOV R31 , R10
                 	__GETW1R 9,10
00035b 9631      	ADIW R30,1
                +
00035c 2e9e     +MOV R9 , R30
00035d 2eaf     +MOV R10 , R31
                 	__PUTW1R 9,10
00035e 9731      	SBIW R30,1
00035f 50e0      	SUBI R30,LOW(-_TWI_Rx_Buf)
000360 4ffc      	SBCI R31,HIGH(-_TWI_Rx_Buf)
000361 01df      	MOVW R26,R30
000362 91e0 00bb 	LDS  R30,187
000364 93ec      	ST   X,R30
000365 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x6:
                +
000366 2da9     +MOV R26 , R9
000367 2dba     +MOV R27 , R10
                 	__GETW2R 9,10
000368 50a0      	SUBI R26,LOW(-_TWI_Rx_Buf)
000369 4fbc      	SBCI R27,HIGH(-_TWI_Rx_Buf)
00036a 91e0 00bb 	LDS  R30,187
00036c 93ec      	ST   X,R30
00036d e8e5      	LDI  R30,LOW(133)
00036e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x7:
                +
00036f 2deb     +MOV R30 , R11
000370 2dfc     +MOV R31 , R12
                 	__GETW1R 11,12
000371 9631      	ADIW R30,1
                +
000372 2ebe     +MOV R11 , R30
000373 2ecf     +MOV R12 , R31
                 	__PUTW1R 11,12
000374 9731      	SBIW R30,1
000375 5cee      	SUBI R30,LOW(-_TWI_Tx_Buf)
000376 4ffb      	SBCI R31,HIGH(-_TWI_Tx_Buf)
000377 81e0      	LD   R30,Z
000378 93e0 00bb 	STS  187,R30
00037a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
00037b e6a4      	LDI  R26,LOW(_UART_Rx_Buf)
00037c e0b4      	LDI  R27,HIGH(_UART_Rx_Buf)
00037d 0da3      	ADD  R26,R3
00037e 1db4      	ADC  R27,R4
00037f 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
000380 935a      	ST   -Y,R21
                 __SAVELOCR5:
000381 934a      	ST   -Y,R20
                 __SAVELOCR4:
000382 933a      	ST   -Y,R19
                 __SAVELOCR3:
000383 932a      	ST   -Y,R18
                 __SAVELOCR2:
000384 931a      	ST   -Y,R17
000385 930a      	ST   -Y,R16
000386 9508      	RET
                 
                 __LOADLOCR6:
000387 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000388 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000389 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00038a 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00038b 8119      	LDD  R17,Y+1
00038c 8108      	LD   R16,Y
00038d 9508      	RET
                 
                 __ANEGW1:
00038e 95f1      	NEG  R31
00038f 95e1      	NEG  R30
000390 40f0      	SBCI R31,0
000391 9508      	RET
                 
                 __ANEGD1:
000392 95f0      	COM  R31
000393 9560      	COM  R22
000394 9570      	COM  R23
000395 95e1      	NEG  R30
000396 4fff      	SBCI R31,-1
000397 4f6f      	SBCI R22,-1
000398 4f7f      	SBCI R23,-1
000399 9508      	RET
                 
                 __ANEGD2:
00039a 95b0      	COM  R27
00039b 9580      	COM  R24
00039c 9590      	COM  R25
00039d 95a1      	NEG  R26
00039e 4fbf      	SBCI R27,-1
00039f 4f8f      	SBCI R24,-1
0003a0 4f9f      	SBCI R25,-1
0003a1 9508      	RET
                 
                 __LSLB12:
0003a2 23ee      	TST  R30
0003a3 2e0e      	MOV  R0,R30
0003a4 2fea      	MOV  R30,R26
0003a5 f019      	BREQ __LSLB12R
                 __LSLB12L:
0003a6 0fee      	LSL  R30
0003a7 940a      	DEC  R0
0003a8 f7e9      	BRNE __LSLB12L
                 __LSLB12R:
0003a9 9508      	RET
                 
                 __DIVW21U:
0003aa 2400      	CLR  R0
0003ab 2411      	CLR  R1
0003ac e190      	LDI  R25,16
                 __DIVW21U1:
0003ad 0faa      	LSL  R26
0003ae 1fbb      	ROL  R27
0003af 1c00      	ROL  R0
0003b0 1c11      	ROL  R1
0003b1 1a0e      	SUB  R0,R30
0003b2 0a1f      	SBC  R1,R31
0003b3 f418      	BRCC __DIVW21U2
0003b4 0e0e      	ADD  R0,R30
0003b5 1e1f      	ADC  R1,R31
0003b6 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0003b7 60a1      	SBR  R26,1
                 __DIVW21U3:
0003b8 959a      	DEC  R25
0003b9 f799      	BRNE __DIVW21U1
0003ba 01fd      	MOVW R30,R26
0003bb 01d0      	MOVW R26,R0
0003bc 9508      	RET
                 
                 __DIVW21:
0003bd d03b      	RCALL __CHKSIGNW
0003be dfeb      	RCALL __DIVW21U
0003bf f40e      	BRTC __DIVW211
0003c0 dfcd      	RCALL __ANEGW1
                 __DIVW211:
0003c1 9508      	RET
                 
                 __DIVD21U:
0003c2 933f      	PUSH R19
0003c3 934f      	PUSH R20
0003c4 935f      	PUSH R21
0003c5 2400      	CLR  R0
0003c6 2411      	CLR  R1
0003c7 01a0      	MOVW R20,R0
0003c8 e230      	LDI  R19,32
                 __DIVD21U1:
0003c9 0faa      	LSL  R26
0003ca 1fbb      	ROL  R27
0003cb 1f88      	ROL  R24
0003cc 1f99      	ROL  R25
0003cd 1c00      	ROL  R0
0003ce 1c11      	ROL  R1
0003cf 1f44      	ROL  R20
0003d0 1f55      	ROL  R21
0003d1 1a0e      	SUB  R0,R30
0003d2 0a1f      	SBC  R1,R31
0003d3 0b46      	SBC  R20,R22
0003d4 0b57      	SBC  R21,R23
0003d5 f428      	BRCC __DIVD21U2
0003d6 0e0e      	ADD  R0,R30
0003d7 1e1f      	ADC  R1,R31
0003d8 1f46      	ADC  R20,R22
0003d9 1f57      	ADC  R21,R23
0003da c001      	RJMP __DIVD21U3
                 __DIVD21U2:
0003db 60a1      	SBR  R26,1
                 __DIVD21U3:
0003dc 953a      	DEC  R19
0003dd f759      	BRNE __DIVD21U1
0003de 01fd      	MOVW R30,R26
0003df 01bc      	MOVW R22,R24
0003e0 01d0      	MOVW R26,R0
0003e1 01ca      	MOVW R24,R20
0003e2 915f      	POP  R21
0003e3 914f      	POP  R20
0003e4 913f      	POP  R19
0003e5 9508      	RET
                 
                 __DIVD21:
0003e6 d020      	RCALL __CHKSIGND
0003e7 dfda      	RCALL __DIVD21U
0003e8 f40e      	BRTC __DIVD211
0003e9 dfa8      	RCALL __ANEGD1
                 __DIVD211:
0003ea 9508      	RET
                 
                 __MODW21:
0003eb 94e8      	CLT
0003ec ffb7      	SBRS R27,7
0003ed c004      	RJMP __MODW211
0003ee 95b1      	NEG  R27
0003ef 95a1      	NEG  R26
0003f0 40b0      	SBCI R27,0
0003f1 9468      	SET
                 __MODW211:
0003f2 fdf7      	SBRC R31,7
0003f3 df9a      	RCALL __ANEGW1
0003f4 dfb5      	RCALL __DIVW21U
0003f5 01fd      	MOVW R30,R26
0003f6 f40e      	BRTC __MODW212
0003f7 df96      	RCALL __ANEGW1
                 __MODW212:
0003f8 9508      	RET
                 
                 __CHKSIGNW:
0003f9 94e8      	CLT
0003fa fff7      	SBRS R31,7
0003fb c002      	RJMP __CHKSW1
0003fc df91      	RCALL __ANEGW1
0003fd 9468      	SET
                 __CHKSW1:
0003fe ffb7      	SBRS R27,7
0003ff c006      	RJMP __CHKSW2
000400 95b1      	NEG  R27
000401 95a1      	NEG  R26
000402 40b0      	SBCI R27,0
000403 f800      	BLD  R0,0
000404 9403      	INC  R0
000405 fa00      	BST  R0,0
                 __CHKSW2:
000406 9508      	RET
                 
                 __CHKSIGND:
000407 94e8      	CLT
000408 ff77      	SBRS R23,7
000409 c002      	RJMP __CHKSD1
00040a df87      	RCALL __ANEGD1
00040b 9468      	SET
                 __CHKSD1:
00040c ff97      	SBRS R25,7
00040d c004      	RJMP __CHKSD2
00040e df8b      	RCALL __ANEGD2
00040f f800      	BLD  R0,0
000410 9403      	INC  R0
000411 fa00      	BST  R0,0
                 __CHKSD2:
000412 9508      	RET
                 
                 _delay_ms:
000413 9610      	adiw r26,0
000414 f039      	breq __delay_ms1
                 __delay_ms0:
000415 95a8      	wdr
                +
000416 ed80     +LDI R24 , LOW ( 0x7D0 )
000417 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000418 9701     +SBIW R24 , 1
000419 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00041a 9711      	sbiw r26,1
00041b f7c9      	brne __delay_ms0
                 __delay_ms1:
00041c 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega328P register use summary:
r0 :  36 r1 :  11 r2 :   0 r3 :  11 r4 :  11 r5 :   6 r6 :   6 r7 :   3 
r8 :   3 r9 :   8 r10:   8 r11:   4 r12:   4 r13:   3 r14:   3 r15:   2 
r16:  26 r17:  24 r18:  10 r19:  14 r20:  14 r21:  11 r22:  23 r23:  12 
r24:  19 r25:  12 r26: 113 r27:  52 r28:   9 r29:   1 r30: 192 r31:  69 
x  :  16 y  :  85 z  :   9 
Registers used: 34 out of 35 (97.1%)

ATmega328P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  11 add   :  11 
adiw  :  11 and   :   0 andi  :  10 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :  15 
brge  :   8 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  22 brpl  :   0 brsh  :   0 brtc  :   3 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   2 call  :   0 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  27 cls   :   0 clt   :   3 clv   :   0 clz   :   0 com   :   6 
cp    :   7 cpc   :  19 cpi   :  19 cpse  :   0 dec   :   4 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   2 inc   :   2 jmp   :  27 ld    :  29 ldd   :  21 ldi   : 134 
lds   :  15 lpm   :   7 lsl   :   4 lsr   :   0 mov   :  39 movw  :  37 
mul   :   0 muls  :   0 mulsu :   0 neg   :   8 nop   :   0 or    :   3 
ori   :   2 out   :   8 pop   :   3 push  :   3 rcall :  79 ret   :  32 
reti  :   2 rjmp  :  36 rol   :  10 ror   :   0 sbc   :   5 sbci  :  20 
sbi   :   0 sbic  :   0 sbis  :   0 sbiw  :  11 sbr   :   2 sbrc  :   1 
sbrs  :   5 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   3 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  53 std   :   0 sts   :  19 sub   :   2 subi  :  11 swap  :   0 
tst   :   1 wdr   :   1 
Instructions used: 55 out of 116 (47.4%)

ATmega328P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00083a   1764    342   2106   32768   6.4%
[.dseg] 0x000100 0x000497      0    407    407    2048  19.9%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 12 warnings
