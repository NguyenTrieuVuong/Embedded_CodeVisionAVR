
AVRASM ver. 2.1.30  E:\CodeVisionAVR\DS1307\Debug\List\DS1307.asm Thu May 25 16:04:11 2023

E:\CodeVisionAVR\DS1307\Debug\List\DS1307.asm(1420): warning: Register r4 already defined by the .DEF directive
E:\CodeVisionAVR\DS1307\Debug\List\DS1307.asm(1421): warning: Register r5 already defined by the .DEF directive
E:\CodeVisionAVR\DS1307\Debug\List\DS1307.asm(1422): warning: Register r6 already defined by the .DEF directive
E:\CodeVisionAVR\DS1307\Debug\List\DS1307.asm(1423): warning: Register r7 already defined by the .DEF directive
E:\CodeVisionAVR\DS1307\Debug\List\DS1307.asm(1424): warning: Register r8 already defined by the .DEF directive
E:\CodeVisionAVR\DS1307\Debug\List\DS1307.asm(1425): warning: Register r9 already defined by the .DEF directive
E:\CodeVisionAVR\DS1307\Debug\List\DS1307.asm(1426): warning: Register r10 already defined by the .DEF directive
E:\CodeVisionAVR\DS1307\Debug\List\DS1307.asm(1427): warning: Register r11 already defined by the .DEF directive
E:\CodeVisionAVR\DS1307\Debug\List\DS1307.asm(1428): warning: Register r12 already defined by the .DEF directive
E:\CodeVisionAVR\DS1307\Debug\List\DS1307.asm(1429): warning: Register r13 already defined by the .DEF directive
E:\CodeVisionAVR\DS1307\Debug\List\DS1307.asm(1430): warning: Register r14 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.51 
                 ;(C) Copyright 1998-2023 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega328P
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega328P
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPMCSR=0x37
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x08FF
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.EQU __FLASH_PAGE_SIZE=0x40
                 	.EQU __EEPROM_PAGE_SIZE=0x04
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rxdata=R4
                 	.DEF _hour=R5
                 	.DEF _hour_msb=R6
                 	.DEF _min=R7
                 	.DEF _min_msb=R8
                 	.DEF _sec=R9
                 	.DEF _sec_msb=R10
                 	.DEF _weekday=R11
                 	.DEF _weekday_msb=R12
                 	.DEF _date=R13
                 	.DEF _date_msb=R14
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 005d 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
                 
                 _0x0:
000034 6954
000035 656d
000036 203a
000037 3a00      	.DB  0x54,0x69,0x6D,0x65,0x3A,0x20,0x0,0x3A
000038 5400
000039 7568
00003a 003a
00003b 4e20      	.DB  0x0,0x54,0x68,0x75,0x3A,0x0,0x20,0x4E
00003c 6167
00003d 3a79
00003e 2f00
00003f 0a00      	.DB  0x67,0x61,0x79,0x3A,0x0,0x2F,0x0,0xA
E:\CodeVisionAVR\DS1307\Debug\List\DS1307.asm(1473): warning: .cseg .db misalignment - padding zero byte
000040 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000041 0007      	.DW  0x07
000042 0300      	.DW  _0x1F
000043 0068      	.DW  _0x0*2
                 
000044 0002      	.DW  0x02
000045 0307      	.DW  _0x1F+7
000046 006f      	.DW  _0x0*2+7
                 
000047 0002      	.DW  0x02
000048 0309      	.DW  _0x1F+9
000049 006f      	.DW  _0x0*2+7
                 
00004a 0002      	.DW  0x02
00004b 030b      	.DW  _0x1F+11
00004c 006d      	.DW  _0x0*2+5
                 
00004d 0005      	.DW  0x05
00004e 030d      	.DW  _0x1F+13
00004f 0071      	.DW  _0x0*2+9
                 
000050 0007      	.DW  0x07
000051 0312      	.DW  _0x1F+18
000052 0076      	.DW  _0x0*2+14
                 
000053 0002      	.DW  0x02
000054 0319      	.DW  _0x1F+25
000055 007d      	.DW  _0x0*2+21
                 
000056 0002      	.DW  0x02
000057 031b      	.DW  _0x1F+27
000058 007d      	.DW  _0x0*2+21
                 
000059 0002      	.DW  0x02
00005a 031d      	.DW  _0x1F+29
00005b 007f      	.DW  _0x0*2+23
                 
                 _0xFFFFFFFF:
00005c 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00005d 94f8      	CLI
00005e 27ee      	CLR  R30
00005f bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000060 e0f1      	LDI  R31,1
000061 bff5      	OUT  MCUCR,R31
000062 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000063 e08d      	LDI  R24,(14-2)+1
000064 e0a2      	LDI  R26,2
000065 27bb      	CLR  R27
                 __CLEAR_REG:
000066 93ed      	ST   X+,R30
000067 958a      	DEC  R24
000068 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000069 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00006a e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00006b e0a0      	LDI  R26,LOW(__SRAM_START)
00006c e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00006d 93ed      	ST   X+,R30
00006e 9701      	SBIW R24,1
00006f f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000070 e8e2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000071 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000072 9185      	LPM  R24,Z+
000073 9195      	LPM  R25,Z+
000074 9700      	SBIW R24,0
000075 f061      	BREQ __GLOBAL_INI_END
000076 91a5      	LPM  R26,Z+
000077 91b5      	LPM  R27,Z+
000078 9005      	LPM  R0,Z+
000079 9015      	LPM  R1,Z+
00007a 01bf      	MOVW R22,R30
00007b 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00007c 9005      	LPM  R0,Z+
00007d 920d      	ST   X+,R0
00007e 9701      	SBIW R24,1
00007f f7e1      	BRNE __GLOBAL_INI_LOOP
000080 01fb      	MOVW R30,R22
000081 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
000082 e0e0      	LDI  R30,__GPIOR0_INIT
000083 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000084 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000085 bfed      	OUT  SPL,R30
000086 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000087 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000088 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000089 e0d3      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00008a 940c 01d1 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x300
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 
                 	.CSEG
                 _uart_transmit:
                 ; .FSTART _uart_transmit
00008c 931a      	ST   -Y,R17
00008d 2f1a      	MOV  R17,R26
                 ;	data -> R17
                 _0x3:
00008e 91e0 00c0 	LDS  R30,192
000090 72e0      	ANDI R30,LOW(0x20)
000091 f3e1      	BREQ _0x3
000092 9310 00c6 	STS  198,R17
000094 c061      	RJMP _0x2000004
                 ; .FEND
                 _putstring:
                 ; .FSTART _putstring
000095 931a      	ST   -Y,R17
000096 930a      	ST   -Y,R16
000097 018d      	MOVW R16,R26
                 ;	*str -> R16,R17
                 _0x6:
000098 01d8      	MOVW R26,R16
000099 91ec      	LD   R30,X
00009a 30e0      	CPI  R30,0
00009b f059      	BREQ _0x8
00009c 91ac      	LD   R26,X
00009d dfee      	RCALL _uart_transmit
00009e 01d8      	MOVW R26,R16
00009f 91ac      	LD   R26,X
0000a0 30aa      	CPI  R26,LOW(0xA)
0000a1 f411      	BRNE _0x9
0000a2 e0ad      	LDI  R26,LOW(13)
0000a3 dfe8      	RCALL _uart_transmit
                 _0x9:
                +
0000a4 5f0f     +SUBI R16 , LOW ( - 1 )
0000a5 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0000a6 cff1      	RJMP _0x6
                 _0x8:
0000a7 c082      	RJMP _0x2000002
                 ; .FEND
                 _putint:
                 ; .FSTART _putint
0000a8 93ba      	ST   -Y,R27
0000a9 93aa      	ST   -Y,R26
0000aa 9728      	SBIW R28,8
0000ab d1cd      	RCALL __SAVELOCR6
                 ;	value -> Y+14
                 ;	buf -> Y+6
                 ;	index -> R16,R17
                 ;	i -> R18,R19
                 ;	j -> R20,R21
                +
0000ac e000     +LDI R16 , LOW ( 0 )
0000ad e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
0000ae 854e     +LDD R20 , Y + 14
0000af 855f     +LDD R21 , Y + 14 + 1
                 	__GETWRS 20,21,14
                 _0xB:
0000b0 01f8      	MOVW R30,R16
0000b1 01de      	MOVW R26,R28
0000b2 9616      	ADIW R26,6
0000b3 0fea      	ADD  R30,R26
0000b4 1ffb      	ADC  R31,R27
0000b5 01bf      	MOVW R22,R30
0000b6 01da      	MOVW R26,R20
0000b7 e0ea      	LDI  R30,LOW(10)
0000b8 e0f0      	LDI  R31,HIGH(10)
0000b9 d206      	RCALL __MODW21
0000ba 5de0      	SUBI R30,-LOW(48)
0000bb 01db      	MOVW R26,R22
0000bc 93ec      	ST   X,R30
0000bd 01da      	MOVW R26,R20
0000be e0ea      	LDI  R30,LOW(10)
0000bf e0f0      	LDI  R31,HIGH(10)
0000c0 d1f7      	RCALL __DIVW21
0000c1 01af      	MOVW R20,R30
                +
0000c2 5f0f     +SUBI R16 , LOW ( - 1 )
0000c3 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0000c4 2e04      	MOV  R0,R20
0000c5 2a05      	OR   R0,R21
0000c6 f749      	BRNE _0xB
0000c7 0198      	MOVW R18,R16
                 _0xE:
0000c8 2400      	CLR  R0
0000c9 1602      	CP   R0,R18
0000ca 0603      	CPC  R0,R19
0000cb f45c      	BRGE _0xF
0000cc 01f9      	MOVW R30,R18
0000cd 9731      	SBIW R30,1
0000ce 01de      	MOVW R26,R28
0000cf 9616      	ADIW R26,6
0000d0 0fae      	ADD  R26,R30
0000d1 1fbf      	ADC  R27,R31
0000d2 91ac      	LD   R26,X
0000d3 dfb8      	RCALL _uart_transmit
                +
0000d4 5021     +SUBI R18 , LOW ( 1 )
0000d5 4030     +SBCI R19 , HIGH ( 1 )
                 	__SUBWRN 18,19,1
0000d6 cff1      	RJMP _0xE
                 _0xF:
0000d7 d1a8      	RCALL __LOADLOCR6
0000d8 9660      	ADIW R28,16
0000d9 9508      	RET
                 ; .FEND
                 _uart_init:
                 ; .FSTART _uart_init
0000da e0e0      	LDI  R30,LOW(0)
0000db 93e0 00c5 	STS  197,R30
0000dd e6e7      	LDI  R30,LOW(103)
0000de 93e0 00c4 	STS  196,R30
0000e0 e0e6      	LDI  R30,LOW(6)
0000e1 93e0 00c2 	STS  194,R30
0000e3 e9e8      	LDI  R30,LOW(152)
0000e4 93e0 00c1 	STS  193,R30
0000e6 9478      	SEI
0000e7 9508      	RET
                 ; .FEND
                 ;void i2c_Begin()
                 ; 0000 0009 {
                 _i2c_Begin:
                 ; .FSTART _i2c_Begin
                 ; 0000 000A PORTC  |= (1 << SCL_PIN) | (1 << SDA_PIN);
0000e8 b1e8      	IN   R30,0x8
0000e9 63e0      	ORI  R30,LOW(0x30)
0000ea b9e8      	OUT  0x8,R30
                 ; 0000 000B DDRC |= (1 << SCL_PIN) | (1 << SDA_PIN);
0000eb b1e7      	IN   R30,0x7
0000ec 63e0      	ORI  R30,LOW(0x30)
0000ed b9e7      	OUT  0x7,R30
                 ; 0000 000C }
0000ee 9508      	RET
                 ; .FEND
                 ;void setMode(unsigned char mode)
                 ; 0000 000F {
                 _setMode:
                 ; .FSTART _setMode
                 ; 0000 0010 if (mode)
0000ef 931a      	ST   -Y,R17
0000f0 2f1a      	MOV  R17,R26
                 ;	mode -> R17
0000f1 3010      	CPI  R17,0
0000f2 f011      	BREQ _0x10
                 ; 0000 0011 DDRC |= (1 << SDA_PIN);
0000f3 9a3c      	SBI  0x7,4
                 ; 0000 0012 else
0000f4 c001      	RJMP _0x11
                 _0x10:
                 ; 0000 0013 DDRC &= ~(1 << SDA_PIN);
0000f5 983c      	CBI  0x7,4
                 ; 0000 0014 }
                 _0x11:
                 _0x2000004:
0000f6 9119      	LD   R17,Y+
0000f7 9508      	RET
                 ; .FEND
                 ;static void i2c_Clock(void)
                 ; 0000 0017 {
                 _i2c_Clock_G000:
                 ; .FSTART _i2c_Clock_G000
                 ; 0000 0018 PORTC  |= (1 << SCL_PIN);
0000f8 d139      	RCALL SUBOPT_0x0
                 ; 0000 0019 delay_us(4);
                 ; 0000 001A PORTC  &= ~(1 << SCL_PIN);
0000f9 9845      	CBI  0x8,5
                 ; 0000 001B delay_us(5);
0000fa c00e      	RJMP _0x2000003
                 ; 0000 001C }
                 ; .FEND
                 ;void i2c_Start(void)
                 ; 0000 001F {
                 _i2c_Start:
                 ; .FSTART _i2c_Start
                 ; 0000 0020 PORTC  |= (1 << SDA_PIN);
0000fb 9a44      	SBI  0x8,4
                 ; 0000 0021 delay_us(4);
                +
0000fc e08b     +LDI R24 , LOW ( 11 )
                +__DELAY_USB_LOOP :
0000fd 958a     +DEC R24
0000fe f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 11
                 ; 0000 0022 PORTC  |= (1 << SCL_PIN);
0000ff d132      	RCALL SUBOPT_0x0
                 ; 0000 0023 delay_us(4);
                 ; 0000 0024 
                 ; 0000 0025 PORTC  &= ~(1 << SDA_PIN);
000100 d136      	RCALL SUBOPT_0x1
                 ; 0000 0026 delay_us(4);
                 ; 0000 0027 PORTC  &= ~(1 << SCL_PIN);
000101 d13a      	RCALL SUBOPT_0x2
                 ; 0000 0028 delay_us(4);
                 ; 0000 0029 }
000102 9508      	RET
                 ; .FEND
                 ;void i2c_Stop(void)
                 ; 0000 002C {
                 _i2c_Stop:
                 ; .FSTART _i2c_Stop
                 ; 0000 002D PORTC  &= ~(1 << SDA_PIN);
000103 d133      	RCALL SUBOPT_0x1
                 ; 0000 002E delay_us(4);
                 ; 0000 002F PORTC  |= (1 << SCL_PIN);
000104 9a45      	SBI  0x8,5
                 ; 0000 0030 delay_us(5);
                +
000105 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000106 958a     +DEC R24
000107 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
                 ; 0000 0031 PORTC  |= (1 << SDA_PIN);
000108 9a44      	SBI  0x8,4
                 ; 0000 0032 delay_us(5);
                 _0x2000003:
                +
000109 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00010a 958a     +DEC R24
00010b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
                 ; 0000 0033 }
00010c 9508      	RET
                 ; .FEND
                 ;unsigned int bcd2dec(unsigned int num)
                 ; 0000 0036 {
                 _bcd2dec:
                 ; .FSTART _bcd2dec
                 ; 0000 0037 return ((num / 16 * 10) + (num % 16));
00010d 931a      	ST   -Y,R17
00010e 930a      	ST   -Y,R16
00010f 018d      	MOVW R16,R26
                 ;	num -> R16,R17
000110 01f8      	MOVW R30,R16
000111 d182      	RCALL __LSRW4
000112 e0aa      	LDI  R26,LOW(10)
000113 e0b0      	LDI  R27,HIGH(10)
000114 d188      	RCALL __MULW12U
000115 01df      	MOVW R26,R30
000116 01f8      	MOVW R30,R16
000117 70ef      	ANDI R30,LOW(0xF)
000118 70f0      	ANDI R31,HIGH(0xF)
000119 0fea      	ADD  R30,R26
00011a 1ffb      	ADC  R31,R27
00011b c00e      	RJMP _0x2000002
                 ; 0000 0038 }
                 ; .FEND
                 ;unsigned int dec2bcd(unsigned int num)
                 ; 0000 003B {
                 _dec2bcd:
                 ; .FSTART _dec2bcd
                 ; 0000 003C return ((num / 10 * 16) + (num % 10));
00011c 931a      	ST   -Y,R17
00011d 930a      	ST   -Y,R16
00011e 018d      	MOVW R16,R26
                 ;	num -> R16,R17
00011f e0ea      	LDI  R30,LOW(10)
000120 e0f0      	LDI  R31,HIGH(10)
000121 d183      	RCALL __DIVW21U
000122 d168      	RCALL __LSLW4
000123 01bf      	MOVW R22,R30
000124 01d8      	MOVW R26,R16
000125 e0ea      	LDI  R30,LOW(10)
000126 e0f0      	LDI  R31,HIGH(10)
000127 d195      	RCALL __MODW21U
000128 0fe6      	ADD  R30,R22
000129 1ff7      	ADC  R31,R23
                 _0x2000002:
00012a 9109      	LD   R16,Y+
00012b 9119      	LD   R17,Y+
00012c 9508      	RET
                 ; 0000 003D }
                 ; .FEND
                 ;unsigned int i2c_Write(unsigned int Data)
                 ; 0000 0040 {
                 _i2c_Write:
                 ; .FSTART _i2c_Write
                 ; 0000 0041 unsigned int i, x = 0, ack;
                 ; 0000 0042 
                 ; 0000 0043 for (i = 0; i < 8; i++)
00012d 93ba      	ST   -Y,R27
00012e 93aa      	ST   -Y,R26
00012f d149      	RCALL __SAVELOCR6
                 ;	Data -> Y+6
                 ;	i -> R16,R17
                 ;	x -> R18,R19
                 ;	ack -> R20,R21
                +
000130 e020     +LDI R18 , LOW ( 0 )
000131 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
000132 e000     +LDI R16 , LOW ( 0 )
000133 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x13:
                +
000134 3008     +CPI R16 , LOW ( 8 )
000135 e0e0     +LDI R30 , HIGH ( 8 )
000136 071e     +CPC R17 , R30
                 	__CPWRN 16,17,8
000137 f4a0      	BRSH _0x14
                 ; 0000 0044 {
                 ; 0000 0045 x = Data & 0x80;
000138 81ee      	LDD  R30,Y+6
000139 81ff      	LDD  R31,Y+6+1
00013a 78e0      	ANDI R30,LOW(0x80)
00013b 70f0      	ANDI R31,HIGH(0x80)
00013c 019f      	MOVW R18,R30
                 ; 0000 0046 PORTC  &= ~(1 << SDA_PIN);
00013d 9844      	CBI  0x8,4
                 ; 0000 0047 if (x)
00013e 2e02      	MOV  R0,R18
00013f 2a03      	OR   R0,R19
000140 f009      	BREQ _0x15
                 ; 0000 0048 PORTC  |= (1 << SDA_PIN);
000141 9a44      	SBI  0x8,4
                 ; 0000 0049 i2c_Clock();
                 _0x15:
000142 dfb5      	RCALL _i2c_Clock_G000
                 ; 0000 004A Data = Data << 1;
000143 81ee      	LDD  R30,Y+6
000144 81ff      	LDD  R31,Y+6+1
000145 0fee      	LSL  R30
000146 1fff      	ROL  R31
000147 83ee      	STD  Y+6,R30
000148 83ff      	STD  Y+6+1,R31
                 ; 0000 004B }
                +
000149 5f0f     +SUBI R16 , LOW ( - 1 )
00014a 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00014b cfe8      	RJMP _0x13
                 _0x14:
                 ; 0000 004C 
                 ; 0000 004D setMode(0);
00014c e0a0      	LDI  R26,LOW(0)
00014d dfa1      	RCALL _setMode
                 ; 0000 004E PORTC  |= (1 << SCL_PIN);
00014e 9a45      	SBI  0x8,5
                 ; 0000 004F delay_us(2);
                +
00014f e085     +LDI R24 , LOW ( 5 )
                +__DELAY_USB_LOOP :
000150 958a     +DEC R24
000151 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 5
                 ; 0000 0050 ack = PINC & (1 << SDA_PIN);
000152 b1e6      	IN   R30,0x6
000153 71e0      	ANDI R30,LOW(0x10)
000154 2f4e      	MOV  R20,R30
000155 2755      	CLR  R21
                 ; 0000 0051 PORTC  &= ~(1 << SCL_PIN);
000156 d0ea      	RCALL SUBOPT_0x3
                 ; 0000 0052 delay_us(5);
                 ; 0000 0053 setMode(1);
000157 e0a1      	LDI  R26,LOW(1)
000158 df96      	RCALL _setMode
                 ; 0000 0054 
                 ; 0000 0055 return ack;
000159 01fa      	MOVW R30,R20
00015a d125      	RCALL __LOADLOCR6
00015b 9628      	ADIW R28,8
00015c 9508      	RET
                 ; 0000 0056 }
                 ; .FEND
                 ;void ds1307_Init(void)
                 ; 0000 0059 {
                 _ds1307_Init:
                 ; .FSTART _ds1307_Init
                 ; 0000 005A i2c_Begin();
00015d df8a      	RCALL _i2c_Begin
                 ; 0000 005B i2c_Start();
00015e d0e7      	RCALL SUBOPT_0x4
                 ; 0000 005C i2c_Write(0xD0);
                 ; 0000 005D i2c_Write(0x07);
00015f e0a7      	LDI  R26,LOW(7)
000160 e0b0      	LDI  R27,0
000161 dfcb      	RCALL _i2c_Write
                 ; 0000 005E i2c_Write(0x00);
000162 e0a0      	LDI  R26,LOW(0)
000163 e0b0      	LDI  R27,0
000164 dfc8      	RCALL _i2c_Write
                 ; 0000 005F i2c_Stop();
000165 c04d      	RJMP _0x2000001
                 ; 0000 0060 }
                 ; .FEND
                 ;unsigned int I2C_Read(unsigned int ACK)
                 ; 0000 0063 {
                 _I2C_Read:
                 ; .FSTART _I2C_Read
                 ; 0000 0064 unsigned int i, Data = 0;
                 ; 0000 0065 
                 ; 0000 0066 setMode(0);
000166 d112      	RCALL __SAVELOCR6
000167 01ad      	MOVW R20,R26
                 ;	ACK -> R20,R21
                 ;	i -> R16,R17
                 ;	Data -> R18,R19
                +
000168 e020     +LDI R18 , LOW ( 0 )
000169 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
00016a e0a0      	LDI  R26,LOW(0)
00016b df83      	RCALL _setMode
                 ; 0000 0067 PORTC  &= ~(1 << SCL_PIN);
00016c d0cf      	RCALL SUBOPT_0x2
                 ; 0000 0068 delay_us(4);
                 ; 0000 0069 for (i = 0; i < 8; i++)
                +
00016d e000     +LDI R16 , LOW ( 0 )
00016e e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x17:
                +
00016f 3008     +CPI R16 , LOW ( 8 )
000170 e0e0     +LDI R30 , HIGH ( 8 )
000171 071e     +CPC R17 , R30
                 	__CPWRN 16,17,8
000172 f448      	BRSH _0x18
                 ; 0000 006A {
                 ; 0000 006B PORTC  |= (1 << SCL_PIN);
000173 9a45      	SBI  0x8,5
                 ; 0000 006C Data <<= 1;
000174 0f22      	LSL  R18
000175 1f33      	ROL  R19
                 ; 0000 006D if (PINC & (1 << SDA_PIN))
000176 9934      	SBIC 0x6,4
                 ; 0000 006E Data |= 0x01;
000177 6021      	ORI  R18,LOW(1)
                 ; 0000 006F PORTC  &= ~(1 << SCL_PIN);
000178 d0c8      	RCALL SUBOPT_0x3
                 ; 0000 0070 delay_us(5);
                 ; 0000 0071 }
                +
000179 5f0f     +SUBI R16 , LOW ( - 1 )
00017a 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00017b cff3      	RJMP _0x17
                 _0x18:
                 ; 0000 0072 
                 ; 0000 0073 setMode(1);
00017c e0a1      	LDI  R26,LOW(1)
00017d df71      	RCALL _setMode
                 ; 0000 0074 if (ACK)
00017e 2e04      	MOV  R0,R20
00017f 2a05      	OR   R0,R21
000180 f011      	BREQ _0x1A
                 ; 0000 0075 PORTC  &= ~(1 << SDA_PIN);
000181 9844      	CBI  0x8,4
                 ; 0000 0076 else
000182 c001      	RJMP _0x1B
                 _0x1A:
                 ; 0000 0077 PORTC  |= (1 << SDA_PIN);
000183 9a44      	SBI  0x8,4
                 ; 0000 0078 
                 ; 0000 0079 PORTC  |= (1 << SCL_PIN);
                 _0x1B:
000184 d0ad      	RCALL SUBOPT_0x0
                 ; 0000 007A delay_us(4);
                 ; 0000 007B PORTC  &= ~(1 << SCL_PIN);
000185 d0b6      	RCALL SUBOPT_0x2
                 ; 0000 007C delay_us(4);
                 ; 0000 007D 
                 ; 0000 007E return Data;
000186 01f9      	MOVW R30,R18
000187 d0f8      	RCALL __LOADLOCR6
000188 9626      	ADIW R28,6
000189 9508      	RET
                 ; 0000 007F }
                 ; .FEND
                 ;void ds1307_Read()
                 ; 0000 0082 {
                 _ds1307_Read:
                 ; .FSTART _ds1307_Read
                 ; 0000 0083 i2c_Start();
00018a d0bb      	RCALL SUBOPT_0x4
                 ; 0000 0084 i2c_Write(0xD0);
                 ; 0000 0085 i2c_Write(0x00);
00018b e0a0      	LDI  R26,LOW(0)
00018c e0b0      	LDI  R27,0
00018d df9f      	RCALL _i2c_Write
                 ; 0000 0086 i2c_Start();
00018e df6c      	RCALL _i2c_Start
                 ; 0000 0087 i2c_Write(0xD1);
00018f eda1      	LDI  R26,LOW(209)
000190 e0b0      	LDI  R27,0
000191 df9b      	RCALL _i2c_Write
                 ; 0000 0088 sec = bcd2dec(I2C_Read(1));
000192 d0b7      	RCALL SUBOPT_0x5
                +
000193 2e9e     +MOV R9 , R30
000194 2eaf     +MOV R10 , R31
                 	__PUTW1R 9,10
                 ; 0000 0089 min = bcd2dec(I2C_Read(1));
000195 d0b4      	RCALL SUBOPT_0x5
                +
000196 2e7e     +MOV R7 , R30
000197 2e8f     +MOV R8 , R31
                 	__PUTW1R 7,8
                 ; 0000 008A hour = bcd2dec(I2C_Read(1));
000198 d0b1      	RCALL SUBOPT_0x5
                +
000199 2e5e     +MOV R5 , R30
00019a 2e6f     +MOV R6 , R31
                 	__PUTW1R 5,6
                 ; 0000 008B weekday = bcd2dec(I2C_Read(1));
00019b d0ae      	RCALL SUBOPT_0x5
                +
00019c 2ebe     +MOV R11 , R30
00019d 2ecf     +MOV R12 , R31
                 	__PUTW1R 11,12
                 ; 0000 008C date = bcd2dec(I2C_Read(1));
00019e d0ab      	RCALL SUBOPT_0x5
                +
00019f 2ede     +MOV R13 , R30
0001a0 2eef     +MOV R14 , R31
                 	__PUTW1R 13,14
                 ; 0000 008D month = bcd2dec(I2C_Read(1));
0001a1 d0a8      	RCALL SUBOPT_0x5
0001a2 93e0 031f 	STS  _month,R30
0001a4 93f0 0320 	STS  _month+1,R31
                 ; 0000 008E year = bcd2dec(I2C_Read(0));
0001a6 e0a0      	LDI  R26,LOW(0)
0001a7 e0b0      	LDI  R27,0
0001a8 dfbd      	RCALL _I2C_Read
0001a9 01df      	MOVW R26,R30
0001aa df62      	RCALL _bcd2dec
0001ab d0a3      	RCALL SUBOPT_0x6
                 ; 0000 008F year += 2000;
0001ac 91e0 0321 	LDS  R30,_year
0001ae 91f0 0322 	LDS  R31,_year+1
0001b0 53e0      	SUBI R30,LOW(-2000)
0001b1 4ff8      	SBCI R31,HIGH(-2000)
0001b2 d09c      	RCALL SUBOPT_0x6
                 ; 0000 0090 i2c_Stop();
                 _0x2000001:
0001b3 df4f      	RCALL _i2c_Stop
                 ; 0000 0091 }
0001b4 9508      	RET
                 ; .FEND
                 ;void ds1307_SetTime(unsigned int sec, unsigned int min, unsigned int hour)
                 ; 0000 0094 {
                 _ds1307_SetTime:
                 ; .FSTART _ds1307_SetTime
                 ; 0000 0095 i2c_Start();
0001b5 d09e      	RCALL SUBOPT_0x7
                 ;	sec -> R20,R21
                 ;	min -> R18,R19
                 ;	hour -> R16,R17
                 ; 0000 0096 i2c_Write(0xD0);
                 ; 0000 0097 i2c_Write(0x00);
0001b6 e0a0      	LDI  R26,LOW(0)
0001b7 d0a3      	RCALL SUBOPT_0x8
                 ; 0000 0098 i2c_Write(dec2bcd(sec));
                 ; 0000 0099 i2c_Stop();
                 ; 0000 009A 
                 ; 0000 009B i2c_Start();
                 ; 0000 009C i2c_Write(0xD0);
                 ; 0000 009D i2c_Write(0x01);
0001b8 e0a1      	LDI  R26,LOW(1)
0001b9 d0a9      	RCALL SUBOPT_0x9
                 ; 0000 009E i2c_Write(dec2bcd(min));
                 ; 0000 009F i2c_Stop();
                 ; 0000 00A0 
                 ; 0000 00A1 i2c_Start();
                 ; 0000 00A2 i2c_Write(0xD0);
                 ; 0000 00A3 i2c_Write(0x02);
0001ba e0a2      	LDI  R26,LOW(2)
0001bb d0af      	RCALL SUBOPT_0xA
                 ; 0000 00A4 i2c_Write(dec2bcd(hour));
                 ; 0000 00A5 i2c_Stop();
                 ; 0000 00A6 }
0001bc 962a      	ADIW R28,10
0001bd 9508      	RET
                 ; .FEND
                 ;void ds1307_SetDate(unsigned int weekday, unsigned int date, unsigned int month, unsigned int year)
                 ; 0000 00A9 {
                 _ds1307_SetDate:
                 ; .FSTART _ds1307_SetDate
                 ; 0000 00AA i2c_Start();
0001be d095      	RCALL SUBOPT_0x7
                 ;	weekday -> Y+10
                 ;	date -> R20,R21
                 ;	month -> R18,R19
                 ;	year -> R16,R17
                 ; 0000 00AB i2c_Write(0xD0);
                 ; 0000 00AC i2c_Write(0x03);
0001bf e0a3      	LDI  R26,LOW(3)
0001c0 e0b0      	LDI  R27,0
0001c1 df6b      	RCALL _i2c_Write
                 ; 0000 00AD i2c_Write(dec2bcd(weekday));
0001c2 85aa      	LDD  R26,Y+10
0001c3 85bb      	LDD  R27,Y+10+1
0001c4 df57      	RCALL _dec2bcd
0001c5 01df      	MOVW R26,R30
0001c6 df66      	RCALL _i2c_Write
                 ; 0000 00AE i2c_Stop();
0001c7 df3b      	RCALL _i2c_Stop
                 ; 0000 00AF 
                 ; 0000 00B0 i2c_Start();
0001c8 d07d      	RCALL SUBOPT_0x4
                 ; 0000 00B1 i2c_Write(0xD0);
                 ; 0000 00B2 i2c_Write(0x04);
0001c9 e0a4      	LDI  R26,LOW(4)
0001ca d090      	RCALL SUBOPT_0x8
                 ; 0000 00B3 i2c_Write(dec2bcd(date));
                 ; 0000 00B4 i2c_Stop();
                 ; 0000 00B5 
                 ; 0000 00B6 i2c_Start();
                 ; 0000 00B7 i2c_Write(0xD0);
                 ; 0000 00B8 i2c_Write(0x05);
0001cb e0a5      	LDI  R26,LOW(5)
0001cc d096      	RCALL SUBOPT_0x9
                 ; 0000 00B9 i2c_Write(dec2bcd(month));
                 ; 0000 00BA i2c_Stop();
                 ; 0000 00BB 
                 ; 0000 00BC i2c_Start();
                 ; 0000 00BD i2c_Write(0xD0);
                 ; 0000 00BE i2c_Write(0x06);
0001cd e0a6      	LDI  R26,LOW(6)
0001ce d09c      	RCALL SUBOPT_0xA
                 ; 0000 00BF i2c_Write(dec2bcd(year));
                 ; 0000 00C0 i2c_Stop();
                 ; 0000 00C1 }
0001cf 962c      	ADIW R28,12
0001d0 9508      	RET
                 ; .FEND
                 ;void main()
                 ; 0000 00C4 {
                 _main:
                 ; .FSTART _main
                 ; 0000 00C5 
                 ; 0000 00C6 uart_init();
0001d1 df08      	RCALL _uart_init
                 ; 0000 00C7 ds1307_Init();
0001d2 df8a      	RCALL _ds1307_Init
                 ; 0000 00C8 ds1307_SetTime(50, 59, 23);
0001d3 e3e2      	LDI  R30,LOW(50)
0001d4 e0f0      	LDI  R31,HIGH(50)
0001d5 93fa      	ST   -Y,R31
0001d6 93ea      	ST   -Y,R30
0001d7 e3eb      	LDI  R30,LOW(59)
0001d8 e0f0      	LDI  R31,HIGH(59)
0001d9 d09a      	RCALL SUBOPT_0xB
0001da dfda      	RCALL _ds1307_SetTime
                 ; 0000 00C9 ds1307_SetDate(3, 30, 5, 23);
0001db e0e3      	LDI  R30,LOW(3)
0001dc e0f0      	LDI  R31,HIGH(3)
0001dd 93fa      	ST   -Y,R31
0001de 93ea      	ST   -Y,R30
0001df e1ee      	LDI  R30,LOW(30)
0001e0 e0f0      	LDI  R31,HIGH(30)
0001e1 93fa      	ST   -Y,R31
0001e2 93ea      	ST   -Y,R30
0001e3 e0e5      	LDI  R30,LOW(5)
0001e4 e0f0      	LDI  R31,HIGH(5)
0001e5 d08e      	RCALL SUBOPT_0xB
0001e6 dfd7      	RCALL _ds1307_SetDate
                 ; 0000 00CA while (1)
                 _0x1C:
                 ; 0000 00CB {
                 ; 0000 00CC ds1307_Read();
0001e7 dfa2      	RCALL _ds1307_Read
                 ; 0000 00CD putstring("Time: ");
                +
0001e8 e0a0     +LDI R26 , LOW ( _0x1F + ( 0 ) )
0001e9 e0b3     +LDI R27 , HIGH ( _0x1F + ( 0 ) )
                 	__POINTW2MN _0x1F,0
0001ea deaa      	RCALL _putstring
                 ; 0000 00CE putint(hour);
                +
0001eb 2da5     +MOV R26 , R5
0001ec 2db6     +MOV R27 , R6
                 	__GETW2R 5,6
0001ed deba      	RCALL _putint
                 ; 0000 00CF putstring(":");
                +
0001ee e0a7     +LDI R26 , LOW ( _0x1F + ( 7 ) )
0001ef e0b3     +LDI R27 , HIGH ( _0x1F + ( 7 ) )
                 	__POINTW2MN _0x1F,7
0001f0 dea4      	RCALL _putstring
                 ; 0000 00D0 putint(min);
                +
0001f1 2da7     +MOV R26 , R7
0001f2 2db8     +MOV R27 , R8
                 	__GETW2R 7,8
0001f3 deb4      	RCALL _putint
                 ; 0000 00D1 putstring(":");
                +
0001f4 e0a9     +LDI R26 , LOW ( _0x1F + ( 9 ) )
0001f5 e0b3     +LDI R27 , HIGH ( _0x1F + ( 9 ) )
                 	__POINTW2MN _0x1F,9
0001f6 de9e      	RCALL _putstring
                 ; 0000 00D2 putint(sec);
                +
0001f7 2da9     +MOV R26 , R9
0001f8 2dba     +MOV R27 , R10
                 	__GETW2R 9,10
0001f9 deae      	RCALL _putint
                 ; 0000 00D3 putstring(" ");
                +
0001fa e0ab     +LDI R26 , LOW ( _0x1F + ( 11 ) )
0001fb e0b3     +LDI R27 , HIGH ( _0x1F + ( 11 ) )
                 	__POINTW2MN _0x1F,11
0001fc de98      	RCALL _putstring
                 ; 0000 00D4 putstring("Thu:");
                +
0001fd e0ad     +LDI R26 , LOW ( _0x1F + ( 13 ) )
0001fe e0b3     +LDI R27 , HIGH ( _0x1F + ( 13 ) )
                 	__POINTW2MN _0x1F,13
0001ff de95      	RCALL _putstring
                 ; 0000 00D5 putint(weekday);
                +
000200 2dab     +MOV R26 , R11
000201 2dbc     +MOV R27 , R12
                 	__GETW2R 11,12
000202 dea5      	RCALL _putint
                 ; 0000 00D6 putstring(" Ngay:");
                +
000203 e1a2     +LDI R26 , LOW ( _0x1F + ( 18 ) )
000204 e0b3     +LDI R27 , HIGH ( _0x1F + ( 18 ) )
                 	__POINTW2MN _0x1F,18
000205 de8f      	RCALL _putstring
                 ; 0000 00D7 putint(date);
                +
000206 2dad     +MOV R26 , R13
000207 2dbe     +MOV R27 , R14
                 	__GETW2R 13,14
000208 de9f      	RCALL _putint
                 ; 0000 00D8 putstring("/");
                +
000209 e1a9     +LDI R26 , LOW ( _0x1F + ( 25 ) )
00020a e0b3     +LDI R27 , HIGH ( _0x1F + ( 25 ) )
                 	__POINTW2MN _0x1F,25
00020b de89      	RCALL _putstring
                 ; 0000 00D9 putint(month);
00020c 91a0 031f 	LDS  R26,_month
00020e 91b0 0320 	LDS  R27,_month+1
000210 de97      	RCALL _putint
                 ; 0000 00DA putstring("/");
                +
000211 e1ab     +LDI R26 , LOW ( _0x1F + ( 27 ) )
000212 e0b3     +LDI R27 , HIGH ( _0x1F + ( 27 ) )
                 	__POINTW2MN _0x1F,27
000213 de81      	RCALL _putstring
                 ; 0000 00DB putint(year);
000214 91a0 0321 	LDS  R26,_year
000216 91b0 0322 	LDS  R27,_year+1
000218 de8f      	RCALL _putint
                 ; 0000 00DC putstring("\n");
                +
000219 e1ad     +LDI R26 , LOW ( _0x1F + ( 29 ) )
00021a e0b3     +LDI R27 , HIGH ( _0x1F + ( 29 ) )
                 	__POINTW2MN _0x1F,29
00021b de79      	RCALL _putstring
                 ; 0000 00DD delay_ms(1000);
00021c eea8      	LDI  R26,LOW(1000)
00021d e0b3      	LDI  R27,HIGH(1000)
00021e d0bd      	RCALL _delay_ms
                 ; 0000 00DE if (hour ==0 && min == 0){
00021f 2400      	CLR  R0
000220 1405      	CP   R0,R5
000221 0406      	CPC  R0,R6
000222 f421      	BRNE _0x21
000223 2400      	CLR  R0
000224 1407      	CP   R0,R7
000225 0408      	CPC  R0,R8
000226 f009      	BREQ _0x22
                 _0x21:
000227 c008      	RJMP _0x20
                 _0x22:
                 ; 0000 00DF PORTB.1 = 1;
000228 9a29      	SBI  0x5,1
                 ; 0000 00E0 delay_ms(500);
000229 efa4      	LDI  R26,LOW(500)
00022a e0b1      	LDI  R27,HIGH(500)
00022b d0b0      	RCALL _delay_ms
                 ; 0000 00E1 PORTB.1 = 0;
00022c 9829      	CBI  0x5,1
                 ; 0000 00E2 delay_ms(500);
00022d efa4      	LDI  R26,LOW(500)
00022e e0b1      	LDI  R27,HIGH(500)
00022f d0ac      	RCALL _delay_ms
                 ; 0000 00E3 }
                 ; 0000 00E4 }
                 _0x20:
000230 cfb6      	RJMP _0x1C
                 ; 0000 00E5 }
                 _0x27:
000231 cfff      	RJMP _0x27
                 ; .FEND
                 
                 	.DSEG
                 _0x1F:
000300           	.BYTE 0x1F
                 
                 	.DSEG
                 _month:
00031f           	.BYTE 0x2
                 _year:
000321           	.BYTE 0x2
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x0:
000232 9a45      	SBI  0x8,5
                +
000233 e08b     +LDI R24 , LOW ( 11 )
                +__DELAY_USB_LOOP :
000234 958a     +DEC R24
000235 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 11
000236 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000237 9844      	CBI  0x8,4
                +
000238 e08b     +LDI R24 , LOW ( 11 )
                +__DELAY_USB_LOOP :
000239 958a     +DEC R24
00023a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 11
00023b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x2:
00023c 9845      	CBI  0x8,5
                +
00023d e08b     +LDI R24 , LOW ( 11 )
                +__DELAY_USB_LOOP :
00023e 958a     +DEC R24
00023f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 11
000240 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
000241 9845      	CBI  0x8,5
                +
000242 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000243 958a     +DEC R24
000244 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000245 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0x4:
000246 deb4      	RCALL _i2c_Start
000247 eda0      	LDI  R26,LOW(208)
000248 e0b0      	LDI  R27,0
000249 cee3      	RJMP _i2c_Write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x5:
00024a e0a1      	LDI  R26,LOW(1)
00024b e0b0      	LDI  R27,0
00024c df19      	RCALL _I2C_Read
00024d 01df      	MOVW R26,R30
00024e cebe      	RJMP _bcd2dec
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
00024f 93e0 0321 	STS  _year,R30
000251 93f0 0322 	STS  _year+1,R31
000253 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x7:
000254 d024      	RCALL __SAVELOCR6
000255 018d      	MOVW R16,R26
                +
000256 812e     +LDD R18 , Y + 6
000257 813f     +LDD R19 , Y + 6 + 1
                 	__GETWRS 18,19,6
                +
000258 8548     +LDD R20 , Y + 8
000259 8559     +LDD R21 , Y + 8 + 1
                 	__GETWRS 20,21,8
00025a cfeb      	RJMP SUBOPT_0x4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x8:
00025b e0b0      	LDI  R27,0
00025c ded0      	RCALL _i2c_Write
00025d 01da      	MOVW R26,R20
00025e debd      	RCALL _dec2bcd
00025f 01df      	MOVW R26,R30
000260 decc      	RCALL _i2c_Write
000261 dea1      	RCALL _i2c_Stop
000262 cfe3      	RJMP SUBOPT_0x4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x9:
000263 e0b0      	LDI  R27,0
000264 dec8      	RCALL _i2c_Write
000265 01d9      	MOVW R26,R18
000266 deb5      	RCALL _dec2bcd
000267 01df      	MOVW R26,R30
000268 dec4      	RCALL _i2c_Write
000269 de99      	RCALL _i2c_Stop
00026a cfdb      	RJMP SUBOPT_0x4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xA:
00026b e0b0      	LDI  R27,0
00026c dec0      	RCALL _i2c_Write
00026d 01d8      	MOVW R26,R16
00026e dead      	RCALL _dec2bcd
00026f 01df      	MOVW R26,R30
000270 debc      	RCALL _i2c_Write
000271 de91      	RCALL _i2c_Stop
000272 d00d      	RCALL __LOADLOCR6
000273 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
000274 93fa      	ST   -Y,R31
000275 93ea      	ST   -Y,R30
000276 e1a7      	LDI  R26,LOW(23)
000277 e0b0      	LDI  R27,0
000278 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
000279 935a      	ST   -Y,R21
                 __SAVELOCR5:
00027a 934a      	ST   -Y,R20
                 __SAVELOCR4:
00027b 933a      	ST   -Y,R19
                 __SAVELOCR3:
00027c 932a      	ST   -Y,R18
                 __SAVELOCR2:
00027d 931a      	ST   -Y,R17
00027e 930a      	ST   -Y,R16
00027f 9508      	RET
                 
                 __LOADLOCR6:
000280 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000281 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000282 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000283 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000284 8119      	LDD  R17,Y+1
000285 8108      	LD   R16,Y
000286 9508      	RET
                 
                 __ANEGW1:
000287 95f1      	NEG  R31
000288 95e1      	NEG  R30
000289 40f0      	SBCI R31,0
00028a 9508      	RET
                 
                 __LSLW4:
00028b 0fee      	LSL  R30
00028c 1fff      	ROL  R31
                 __LSLW3:
00028d 0fee      	LSL  R30
00028e 1fff      	ROL  R31
                 __LSLW2:
00028f 0fee      	LSL  R30
000290 1fff      	ROL  R31
000291 0fee      	LSL  R30
000292 1fff      	ROL  R31
000293 9508      	RET
                 
                 __LSRW4:
000294 95f6      	LSR  R31
000295 95e7      	ROR  R30
                 __LSRW3:
000296 95f6      	LSR  R31
000297 95e7      	ROR  R30
                 __LSRW2:
000298 95f6      	LSR  R31
000299 95e7      	ROR  R30
00029a 95f6      	LSR  R31
00029b 95e7      	ROR  R30
00029c 9508      	RET
                 
                 __MULW12U:
00029d 9ffa      	MUL  R31,R26
00029e 2df0      	MOV  R31,R0
00029f 9feb      	MUL  R30,R27
0002a0 0df0      	ADD  R31,R0
0002a1 9fea      	MUL  R30,R26
0002a2 2de0      	MOV  R30,R0
0002a3 0df1      	ADD  R31,R1
0002a4 9508      	RET
                 
                 __DIVW21U:
0002a5 2400      	CLR  R0
0002a6 2411      	CLR  R1
0002a7 e190      	LDI  R25,16
                 __DIVW21U1:
0002a8 0faa      	LSL  R26
0002a9 1fbb      	ROL  R27
0002aa 1c00      	ROL  R0
0002ab 1c11      	ROL  R1
0002ac 1a0e      	SUB  R0,R30
0002ad 0a1f      	SBC  R1,R31
0002ae f418      	BRCC __DIVW21U2
0002af 0e0e      	ADD  R0,R30
0002b0 1e1f      	ADC  R1,R31
0002b1 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0002b2 60a1      	SBR  R26,1
                 __DIVW21U3:
0002b3 959a      	DEC  R25
0002b4 f799      	BRNE __DIVW21U1
0002b5 01fd      	MOVW R30,R26
0002b6 01d0      	MOVW R26,R0
0002b7 9508      	RET
                 
                 __DIVW21:
0002b8 d015      	RCALL __CHKSIGNW
0002b9 dfeb      	RCALL __DIVW21U
0002ba f40e      	BRTC __DIVW211
0002bb dfcb      	RCALL __ANEGW1
                 __DIVW211:
0002bc 9508      	RET
                 
                 __MODW21U:
0002bd dfe7      	RCALL __DIVW21U
0002be 01fd      	MOVW R30,R26
0002bf 9508      	RET
                 
                 __MODW21:
0002c0 94e8      	CLT
0002c1 ffb7      	SBRS R27,7
0002c2 c004      	RJMP __MODW211
0002c3 95b1      	NEG  R27
0002c4 95a1      	NEG  R26
0002c5 40b0      	SBCI R27,0
0002c6 9468      	SET
                 __MODW211:
0002c7 fdf7      	SBRC R31,7
0002c8 dfbe      	RCALL __ANEGW1
0002c9 dfdb      	RCALL __DIVW21U
0002ca 01fd      	MOVW R30,R26
0002cb f40e      	BRTC __MODW212
0002cc dfba      	RCALL __ANEGW1
                 __MODW212:
0002cd 9508      	RET
                 
                 __CHKSIGNW:
0002ce 94e8      	CLT
0002cf fff7      	SBRS R31,7
0002d0 c002      	RJMP __CHKSW1
0002d1 dfb5      	RCALL __ANEGW1
0002d2 9468      	SET
                 __CHKSW1:
0002d3 ffb7      	SBRS R27,7
0002d4 c006      	RJMP __CHKSW2
0002d5 95b1      	NEG  R27
0002d6 95a1      	NEG  R26
0002d7 40b0      	SBCI R27,0
0002d8 f800      	BLD  R0,0
0002d9 9403      	INC  R0
0002da fa00      	BST  R0,0
                 __CHKSW2:
0002db 9508      	RET
                 
                 _delay_ms:
0002dc 9610      	adiw r26,0
0002dd f039      	breq __delay_ms1
                 __delay_ms0:
0002de 95a8      	wdr
                +
0002df ed80     +LDI R24 , LOW ( 0x7D0 )
0002e0 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0002e1 9701     +SBIW R24 , 1
0002e2 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0002e3 9711      	sbiw r26,1
0002e4 f7c9      	brne __delay_ms0
                 __delay_ms1:
0002e5 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega328P register use summary:
r0 :  30 r1 :   6 r2 :   0 r3 :   0 r4 :   0 r5 :   3 r6 :   3 r7 :   3 
r8 :   3 r9 :   2 r10:   2 r11:   2 r12:   2 r13:   2 r14:   2 r15:   0 
r16:  27 r17:  22 r18:  15 r19:   9 r20:  13 r21:   7 r22:   6 r23:   1 
r24:  25 r25:   5 r26:  92 r27:  49 r28:   9 r29:   1 r30: 109 r31:  53 
x  :   8 y  :  49 z  :   7 
Registers used: 31 out of 35 (88.6%)

ATmega328P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   5 add   :   7 
adiw  :   8 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   8 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  17 brpl  :   0 brsh  :   2 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :   0 
cbi   :   8 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   8 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   0 
cp    :   3 cpc   :   5 cpi   :   5 cpse  :   0 dec   :  10 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   3 inc   :   1 jmp   :  27 ld    :   8 ldd   :  17 ldi   : 117 
lds   :   7 lpm   :   7 lsl   :   7 lsr   :   4 mov   :  28 movw  :  41 
mul   :   3 muls  :   0 mulsu :   0 neg   :   6 nop   :   0 or    :   3 
ori   :   3 out   :   8 pop   :   0 push  :   0 rcall : 113 ret   :  31 
reti  :   0 rjmp  :  24 rol   :   9 ror   :   4 sbc   :   1 sbci  :   9 
sbi   :  10 sbic  :   1 sbis  :   0 sbiw  :   7 sbr   :   1 sbrc  :   1 
sbrs  :   3 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  30 std   :   2 sts   :   9 sub   :   1 subi  :   7 swap  :   0 
tst   :   0 wdr   :   1 
Instructions used: 58 out of 116 (50.0%)

ATmega328P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0005cc   1402     82   1484   32768   4.5%
[.dseg] 0x000100 0x000323      0     35     35    2048   1.7%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 12 warnings
