;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;void blinkled(unsigned int cycle){
; 0000 000A void blinkled(unsigned int cycle){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 000B unsigned int val;
; 0000 000C val = 16000000/(2*1024*cycle);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	cycle -> R18,R19
;	val -> R16,R17
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 000D OCR1AH = val;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 000E OCR1AL = val >> 8;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 000F }
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;interrupt [12] void timer1_compa_isr(void)
; 0000 0011 {
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0012 
; 0000 0013 PORTB.5 = !PORTB.5;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0014 blinkled(1);
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0015 }
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;void main(void)
; 0000 0017 {
;PCODE: $00000032 VOL: 0
; 0000 0018 CLKPR = (1 << CLKPCE);
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0019 CLKPR = 0b00000101;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 001A DDRB |= 0b00000010;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 001B PORTB &= 0b11111101;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 001C TCCR1A = 0b10000010;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 001D TCCR1B = 0b00011101;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 001E //OCR1A = 244;  // 500000/(2*1024)
; 0000 001F blinkled(1);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0020 
; 0000 0021 // TIMSK and global enable interrupts
; 0000 0022 TIMSK0 = 0b00000010;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0023 #asm("sei")
;PCODE: $00000044 VOL: 0
; 0000 0024 
; 0000 0025 while (1)
;PCODE: $00000045 VOL: 0
; 0000 0026 {
; 0000 0027 // Please write your application code here
; 0000 0028 
; 0000 0029 }
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 002A }
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
