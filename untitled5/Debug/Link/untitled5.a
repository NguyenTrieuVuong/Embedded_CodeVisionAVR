;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;void sang_toi(int prescaler, int sang, int toi){
; 0000 0003 void sang_toi(int prescaler, int sang, int toi){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0004 int top, compare;
; 0000 0005 top = ((sang+toi)*16*1000000)/(2*prescaler) - 1;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	prescaler -> Y+8
;	sang -> Y+6
;	toi -> R20,R21
;	top -> R16,R17
;	compare -> R18,R19
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0006 compare = (top*sang)/(sang+toi);
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0007 
; 0000 0008 ICR1H = (top >> 8);
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0009 ICR1L = top;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 000A 
; 0000 000B OCR1AH = (compare >> 8);
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 000C OCR1AL = compare;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 000D }
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;void main(void)
; 0000 000F {
;PCODE: $00000035 VOL: 0
; 0000 0010 TCCR1A |= (1 << COM1A1) | (1 << WGM11);     // COM1A1 = 1 => non-inverting mode
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0011 // WGM11 = 1 => fast PWM (TOP is set at ICR1)
; 0000 0012 
; 0000 0013 TCCR1B |= (1 << WGM13) | (1 << WGM12) | (1 << CS12) | (1 << CS10);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0014 // WGM13 = WGM12 = 1 => fast PWM (TOP is set at ICR1)
; 0000 0015 // CS12 = CS10 => prescale = 1024
; 0000 0016 
; 0000 0017 DDRB |= (1 << DDB1);          // Set PortB 1 as Output, PortB 5 as Input
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0018 PORTB = (1 << PORTB1);                      // Pullup Resistor
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0019 sang_toi(1024,1,2);
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 001A while (1)
;PCODE: $00000047 VOL: 0
; 0000 001B {
; 0000 001C // Please write your application code here
; 0000 001D }
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 001E }
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
