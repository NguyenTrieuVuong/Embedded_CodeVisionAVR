;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0

	.DSEG
;void send_data(unsigned char data)
; 0000 001C {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001D LCD_DC = 1; // Set the data/command control signal to data
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	data -> R17
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 001E LCD_CE = 0; // Set the chip enable signal low to start data transmission
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 001F SPDR = data; // Send the data to the SPI module
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0020 while (!(SPSR & (1 << SPIF))); // Wait for the data transmission to complete
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0021 LCD_CE = 1; // Set the chip enable signal high to end data transmission
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0022 }
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;void send_command(unsigned char cmd)
; 0000 0026 {
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0027 LCD_DC = 0; // Set the data/command control signal to command
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;	cmd -> R17
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0028 LCD_CE = 0; // Set the chip enable signal low to start command transmission
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0029 SPDR = cmd; // Send the command to the SPI module
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 002A while (!(SPSR & (1 << SPIF))); // Wait for the command transmission to complete
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 002B LCD_CE = 1; // Set the chip enable signal high to end command transmission
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 002C }
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;void clear_display()
; 0000 0030 {
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0031 int i;
; 0000 0032 for (i = 0; i < 84 * 6; i++) // Clear 84x6 pixels (6 rows of 84 pixels)
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;	i -> R16,R17
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0033 {
; 0000 0034 send_data(0x00); // Send blank data to the display
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0035 }
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0036 }
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;void display_char(unsigned char ch)
; 0000 003A {
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 003B int i;
; 0000 003C ch -= 32; // Adjust the character code to match the character data array
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;	ch -> R19
;	i -> R16,R17
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 003D for (i = 0; i < 5; i++) // Send 5 columns of pixel data for the character
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 003E {
; 0000 003F send_data(char_data[ch * 5 + i]); // Send the pixel data to the display
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0040 }
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0041 send_data(0x00); // Add a blank column after the character
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0042 }
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;void display_string(char *str)
; 0000 0046 {
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0047 while (*str) // Loop through each character in the string
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;	*str -> R16,R17
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0048 {
; 0000 0049 display_char(*str); // Display the character on the display
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 004A str++; // Move to the next character in the string
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 004B }
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 004C }
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;void set_cursor(unsigned char x, unsigned char y)
; 0000 0050 {
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0051 send_command(0x80 | x); // Set column address
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;	x -> R16
;	y -> R17
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0052 send_command(0x40 | y); // Set row address
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0053 }
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;void main(void)
; 0000 0056 {
;PCODE: $00000098 VOL: 0
; 0000 0057 int i;
; 0000 0058 
; 0000 0059 // Initialize the SPI module for communication with the Nokia 5110 LCD display
; 0000 005A SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0);
;	i -> R16,R17
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 005B 
; 0000 005C // Initialize the control signals for the Nokia 5110 LCD display
; 0000 005D DDRD |= (1 << PORTD5) | (1 << PORTD4) | (1 << PORTD3) | (1 << PORTD2) | (1 << PORTD6);
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 005E 
; 0000 005F // Set the reset signal high to initialize the Nokia 5110 LCD display
; 0000 0060 LCD_RST = 1;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 0061 delay_ms(10);
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0062 LCD_RST = 0;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 0063 delay_ms(10);
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 0064 LCD_RST = 1;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 0065 
; 0000 0066 // Send the initialization commands to the Nokia 5110 LCD display
; 0000 0067 for (i = 0; i < 6; i++)
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 0068 {
; 0000 0069 send_command(init_cmds[i]);
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 006A }
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 006B 
; 0000 006C // Clear the Nokia 5110 LCD display
; 0000 006D clear_display();
;PCODE: $000000BC VOL: 0
; 0000 006E 
; 0000 006F // Set the cursor position to (0, 0)
; 0000 0070 set_cursor(0, 0);
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 0071 
; 0000 0072 // Display a string of characters on the Nokia 5110 LCD display
; 0000 0073 display_string("Hello World!");
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 0074 
; 0000 0075 while (1)
;PCODE: $000000C4 VOL: 0
; 0000 0076 {
; 0000 0077 // Loop indefinitely
; 0000 0078 }
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 0079 }
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0

	.DSEG
_0x29:
	.BYTE 0xD
