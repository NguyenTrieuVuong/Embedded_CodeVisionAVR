;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;void putchar(unsigned char data){
; 0000 0008 void putchar(unsigned char data){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0009 while(!(UCSR0A & 0b00100000));   //cho thanh ghi du lieu EMPTY
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	data -> R17
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 000A UDR0 = data;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 000B }
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;void putstring(unsigned char *str){
; 0000 000D void putstring(unsigned char *str){
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 000E while(*str){
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;	*str -> R16,R17
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 000F putchar(*str);
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0010 //if see the line feed, add carriage return
; 0000 0011 if(*str == '\n')
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0012 putchar('\r');
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0013 str++;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0014 }
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0015 }
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;void put_int(unsigned int value){
; 0000 0017 void put_int(unsigned int value){
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0018 unsigned char buf[8];
; 0000 0019 int index = 0,i,j;
; 0000 001A j = value;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;	value -> Y+14
;	buf -> Y+6
;	index -> R16,R17
;	i -> R18,R19
;	j -> R20,R21
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 001B do{
;PCODE: $00000040 VOL: 0
; 0000 001C buf[index] = j%10 + 48;     //chuyen gia tri sang ki tu
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 001D j = j/10;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 001E index += 1;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 001F }
; 0000 0020 while (j);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0021 
; 0000 0022 for(i = index; i>0; i--)
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0023 putchar(buf[i-1]);
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0024 }
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;interrupt [14] void timer1_ovf_isr(void){
; 0000 0026 interrupt [14] void timer1_ovf_isr(void){
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0027 PORTB.5 = !PORTB.5;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0028 TCNT1H = 0x85;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0029 TCNT1L = 0xEE;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 002A put_int(TCNT0);
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 002B }
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;void main(void)
; 0000 002E {
;PCODE: $00000084 VOL: 0
; 0000 002F 
; 0000 0030 //UART
; 0000 0031 //tinh gia tri baud rate roi dua vao thanh ghi UBRRn
; 0000 0032 n = fOSC/(16*BAUDRATE)-1;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0033 UBRR0H = n>>8;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0034 UBRR0L = n;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 0035 //cau hinh che do truyen, khung ban tin bang thanh ghi UCSRnC
; 0000 0036 UCSR0C = 0b00000110;                //truyen ko dong bo, 8 data bit, 1 stop bit, no parity
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0037 //cho phep ca 2 chieu truyen nhan, cho phep ngat nhan du lieu (RX interrupt)
; 0000 0038 UCSR0B = 0b10011000;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0039 
; 0000 003A //Timer1/Counter0
; 0000 003B CLKPR = (1<<CLKPCE);            //Cho phep chia tan so
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 003C CLKPR = 0x00;                   //Dat he so chia la 1
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 003D 
; 0000 003E DDRB != 0b00100000;             //Dat PORTB.5 la OUT
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 003F PORTB &= 0b11011111;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0040 DDRB.5 = 1;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 0041 PORTB.5 = 1;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0042 
; 0000 0043 TCCR1A = 0x00;                  //Dat che do Overflow(dem tu vi tri setup den vi tri cuoi)
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 0044 
; 0000 0045 //Cau hinh nguon chia clock cho timer bang thanh ghi TCCRxB.
; 0000 0046 TCCR1B = 0b00000100;            //Clock timer = clockIO/256
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 0047 //Dat gia tri ban dau cho thanh ghi TCNTx
; 0000 0048 TCNT1H = 0x85;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0049 TCNT1L = 0xEE;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 004A TCNT0 = 0;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 004B 
; 0000 004C //Cho phep ngat phu hop bang thanh ghi TIMSKx
; 0000 004D TIMSK1 = 0b00000001;            //Cho phep ngat Overflow
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 004E //Cho phep ngat toan cuc
; 0000 004F #asm("sei")
;PCODE: $000000A9 VOL: 0
; 0000 0050 
; 0000 0051 while (1)
;PCODE: $000000AA VOL: 0
; 0000 0052 {
; 0000 0053 // Please'/ write your application code here
; 0000 0054 
; 0000 0055 }
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 0056 }
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
