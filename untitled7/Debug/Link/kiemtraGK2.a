;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;void adc_init(void);
;void uart_init(void);
;void uart_send_string(char *string);
;void flash_led(int times);
;void main(void)
; 0000 0012 {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0013 // Khai báo bi?n
; 0000 0014 char buffer[30];
; 0000 0015 
; 0000 0016 // Kh?i t?o ADC và UART
; 0000 0017 adc_init();
;PCODE: $0000000E VOL: 0
;	buffer -> Y+0
;PCODE: $0000000F VOL: 0
; 0000 0018 uart_init();
;PCODE: $00000010 VOL: 0
; 0000 0019 
; 0000 001A // Kh?i t?o chân PD6 là d?u ra
; 0000 001B DDRD.6 = 1;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 001C 
; 0000 001D while (1)
;PCODE: $00000013 VOL: 0
; 0000 001E {
; 0000 001F // Ð?c giá tr? ADC t? chân ADC5
; 0000 0020 ADCSRA |= (1 << ADSC);  // B?t d?u chuy?n d?i ADC
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0021 while (ADCSRA & (1 << ADSC)==0);  // Ch? chuy?n d?i ADC hoàn t?t
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0022 adc_value = ADCW;  // Luu giá tr? ADC vào bi?n adc_value
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0023 
; 0000 0024 // X? lý giá tr? ADC và di?u khi?n LED và g?i thông di?p
; 0000 0025 if (adc_value > 800)
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0026 {
; 0000 0027 sprintf(message, "System Alarm\r\n");  // T?o thông di?p
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0028 flash_led(8);  // Nh?p nháy dèn 8 l?n (4 Hz x 8 = 32 Hz)
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0029 }
; 0000 002A else if(adc_value < 800)
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 002B {
; 0000 002C sprintf(message, "Alarm over\r\n");  // T?o thông di?p
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 002D PORTD.6 = 0;  // T?t dèn LED
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 002E }
; 0000 002F uart_send_string(message);  // G?i thông di?p qua UART
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0030 
; 0000 0031 // Ch? 500ms tru?c khi d?c giá tr? ADC l?n ti?p theo
; 0000 0032 ADCSRA |= (1 << ADIF);
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0033 delay_ms(100);
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0034 }
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0035 }
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;void adc_init(void)
; 0000 0039 {
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 003A ADMUX = (1 << REFS0) | (1 << MUX2) | (1 << MUX0);  // Ch?n ngu?n tham chi?u AVCC, ch?n kênh ADC5
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 003B ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);  // Cho phép ADC, chia t? l? clock là 128
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 003C }
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;void uart_init(void)
; 0000 0040 {
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0041 UCSR0A = 0;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0042 UCSR0B = (1 << RXEN0) | (1 << TXEN0);  // Cho phép UART nh?n và g?i
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0043 UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);  // Ð?t kích thu?c khung truy?n là 8 bit, không có bit ki?m tra và bit stop
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0044 UBRR0H = 0;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0045 UBRR0L = 8;  // Thi?t l?p t?c d? baud
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0046 }
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;void uart_send_string(char *string)
; 0000 004A {
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 004B while (*string != '\0')
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;	*string -> R16,R17
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 004C {
; 0000 004D while ((UCSR0A & (1 << UDRE0)) == 0); // Ch? d?n khi có th? g?i ký t?
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 004E UDR0 = *string; // G?i ký t?
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 004F string++; // Tang con tr? d? g?i ký t? ti?p theo
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0050 }
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0051 }
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;void flash_led(int times)
; 0000 0055 {
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0056 int i;
; 0000 0057 
; 0000 0058 for (i = 0; i < times; i++)
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;	times -> R18,R19
;	i -> R16,R17
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0059 {
; 0000 005A PORTD.6 = 1; // B?t dèn LED
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 005B delay_ms(125); // Ch? 125ms (4 Hz)
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 005C PORTD.6 = 0; // T?t dèn LED
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 005D delay_ms(125); // Ch? 125ms (4 Hz)
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 005E }
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 005F }
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
