;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;void uart_init(void)
; 0000 0013 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0014 int n = baud_prescaler;
; 0000 0015 UBRR0H = (n >> 8);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	n -> R16,R17
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0016 UBRR0L = n;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0017 UCSR0C = 0b00000110;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0018 UCSR0B = 0b10011000;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0019 #asm("sei")
;PCODE: $0000001C VOL: 0
; 0000 001A }
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;void uart_transmit(unsigned char data)
; 0000 001D {
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 001E while(!(UCSR0A & 0b00100000));
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;	data -> R17
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 001F 
; 0000 0020 UDR0 = data;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0021 }
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;void putint(unsigned int value)
; 0000 0024 {
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0025 unsigned char buf[8];
; 0000 0026 int index = 0, i, j;
; 0000 0027 j = value;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;	value -> Y+14
;	buf -> Y+6
;	index -> R16,R17
;	i -> R18,R19
;	j -> R20,R21
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0028 do
;PCODE: $00000038 VOL: 0
; 0000 0029 {
; 0000 002A buf[index] = j % 10 + 48;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 002B j = j / 10;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 002C index += 1;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 002D }
; 0000 002E while(j);
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 002F for (i = index; i > 0; i--)
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0030 uart_transmit(buf[i - 1]);
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0031 }
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;void putstring(unsigned char *str)
; 0000 0034 {
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0035 while(*str)
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;	*str -> R16,R17
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0036 {
; 0000 0037 uart_transmit(*str);
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0038 if (*str == '\n')
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0039 uart_transmit('\r');
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 003A str++;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 003B }
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 003C }
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;void init_adc(void){
; 0000 003E void init_adc(void){
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 003F ADMUX |= (1<<REFS0);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0040 ADCSRA |= 0b10000111;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0041 DIDR0 |= 0x01;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0042 delay_ms(10);
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0043 
; 0000 0044 }
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;void main(void)
; 0000 0047 {
;PCODE: $00000090 VOL: 0
; 0000 0048 uart_init();
;PCODE: $00000091 VOL: 0
; 0000 0049 init_adc();
;PCODE: $00000092 VOL: 0
; 0000 004A while (1)
;PCODE: $00000093 VOL: 0
; 0000 004B {
; 0000 004C // Please write your application code here
; 0000 004D ADCSRA |= 0b01000000;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 004E while((ADCSRA & 0b00010000) ==0);
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 004F adc_value = ADCW;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 0050 ADCSRA |= 0b00010000;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0051 putstring("Gia tri ADC: ");
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 0052 putint(adc_value);
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 0053 putstring("\n");
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 0054 voltage_val = adc_value*500/1024;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 0055 putint(voltage_val);
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 0056 putstring("\n");
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 0057 
; 0000 0058 demi_part = voltage_val%100;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 0059 int_part = voltage_val/100;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 005A putstring("Gia tri dien ap: ");
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 005B putint(int_part);
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 005C putstring(".");
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 005D putint(demi_part);
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 005E putstring(" vol \n");
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 005F delay_ms(3000);
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 0060 }
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 0061 }
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0

	.DSEG
_0x16:
	.BYTE 0x2D
