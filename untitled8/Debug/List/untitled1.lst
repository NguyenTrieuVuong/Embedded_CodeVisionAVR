
AVRASM ver. 2.1.30  E:\CodeVisionAVR\untitled8\Debug\List\untitled1.asm Thu Apr 27 11:06:41 2023

E:\CodeVisionAVR\untitled8\Debug\List\untitled1.asm(1420): warning: Register r4 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.51 Evaluation
                 ;(C) Copyright 1998-2023 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega328P
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega328P
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPMCSR=0x37
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x08FF
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.EQU __FLASH_PAGE_SIZE=0x40
                 	.EQU __EEPROM_PAGE_SIZE=0x04
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rxdata=R4
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0048 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
                 
                 _0x0:
000034 6554
000035 706d
000036 7265
000037 7461      	.DB  0x54,0x65,0x6D,0x70,0x65,0x72,0x61,0x74
000038 7275
000039 3a65
00003a 0020
00003b 002e      	.DB  0x75,0x72,0x65,0x3A,0x20,0x0,0x2E,0x0
00003c 0a43
E:\CodeVisionAVR\untitled8\Debug\List\untitled1.asm(1462): warning: .cseg .db misalignment - padding zero byte
00003d 0000      	.DB  0x43,0xA,0x0
                 
                 __GLOBAL_INI_TBL:
00003e 000e      	.DW  0x0E
00003f 0300      	.DW  _0x1E
000040 0068      	.DW  _0x0*2
                 
000041 0002      	.DW  0x02
000042 030e      	.DW  _0x1E+14
000043 0076      	.DW  _0x0*2+14
                 
000044 0003      	.DW  0x03
000045 0310      	.DW  _0x1E+16
000046 0078      	.DW  _0x0*2+16
                 
                 _0xFFFFFFFF:
000047 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000048 94f8      	CLI
000049 27ee      	CLR  R30
00004a bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00004b e0f1      	LDI  R31,1
00004c bff5      	OUT  MCUCR,R31
00004d bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00004e e08d      	LDI  R24,(14-2)+1
00004f e0a2      	LDI  R26,2
000050 27bb      	CLR  R27
                 __CLEAR_REG:
000051 93ed      	ST   X+,R30
000052 958a      	DEC  R24
000053 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000054 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000055 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000056 e0a0      	LDI  R26,LOW(__SRAM_START)
000057 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000058 93ed      	ST   X+,R30
000059 9701      	SBIW R24,1
00005a f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00005b e7ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00005c e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00005d 9185      	LPM  R24,Z+
00005e 9195      	LPM  R25,Z+
00005f 9700      	SBIW R24,0
000060 f061      	BREQ __GLOBAL_INI_END
000061 91a5      	LPM  R26,Z+
000062 91b5      	LPM  R27,Z+
000063 9005      	LPM  R0,Z+
000064 9015      	LPM  R1,Z+
000065 01bf      	MOVW R22,R30
000066 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000067 9005      	LPM  R0,Z+
000068 920d      	ST   X+,R0
000069 9701      	SBIW R24,1
00006a f7e1      	BRNE __GLOBAL_INI_LOOP
00006b 01fb      	MOVW R30,R22
00006c cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
00006d e0e0      	LDI  R30,__GPIOR0_INIT
00006e bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00006f efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000070 bfed      	OUT  SPL,R30
000071 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000072 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000073 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000074 e0d3      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000075 940c 0160 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x300
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 
                 	.CSEG
                 _uart_transmit:
                 ; .FSTART _uart_transmit
000077 931a      	ST   -Y,R17
000078 2f1a      	MOV  R17,R26
                 ;	data -> R17
                 _0x3:
000079 91e0 00c0 	LDS  R30,192
00007b 72e0      	ANDI R30,LOW(0x20)
00007c f3e1      	BREQ _0x3
00007d 9310 00c6 	STS  198,R17
00007f c083      	RJMP _0x2000002
                 ; .FEND
                 _putstring:
                 ; .FSTART _putstring
000080 931a      	ST   -Y,R17
000081 930a      	ST   -Y,R16
000082 018d      	MOVW R16,R26
                 ;	*str -> R16,R17
                 _0x6:
000083 01d8      	MOVW R26,R16
000084 91ec      	LD   R30,X
000085 30e0      	CPI  R30,0
000086 f059      	BREQ _0x8
000087 91ac      	LD   R26,X
000088 dfee      	RCALL _uart_transmit
000089 01d8      	MOVW R26,R16
00008a 91ac      	LD   R26,X
00008b 30aa      	CPI  R26,LOW(0xA)
00008c f411      	BRNE _0x9
00008d e0ad      	LDI  R26,LOW(13)
00008e dfe8      	RCALL _uart_transmit
                 _0x9:
                +
00008f 5f0f     +SUBI R16 , LOW ( - 1 )
000090 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000091 cff1      	RJMP _0x6
                 _0x8:
000092 c091      	RJMP _0x2000001
                 ; .FEND
                 _putint:
                 ; .FSTART _putint
000093 93ba      	ST   -Y,R27
000094 93aa      	ST   -Y,R26
000095 9728      	SBIW R28,8
000096 d132      	RCALL __SAVELOCR6
                 ;	value -> Y+14
                 ;	buf -> Y+6
                 ;	index -> R16,R17
                 ;	i -> R18,R19
                 ;	j -> R20,R21
                +
000097 e000     +LDI R16 , LOW ( 0 )
000098 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
000099 854e     +LDD R20 , Y + 14
00009a 855f     +LDD R21 , Y + 14 + 1
                 	__GETWRS 20,21,14
                 _0xB:
00009b 01f8      	MOVW R30,R16
00009c 01de      	MOVW R26,R28
00009d 9616      	ADIW R26,6
00009e 0fea      	ADD  R30,R26
00009f 1ffb      	ADC  R31,R27
0000a0 01bf      	MOVW R22,R30
0000a1 01da      	MOVW R26,R20
0000a2 e0ea      	LDI  R30,LOW(10)
0000a3 e0f0      	LDI  R31,HIGH(10)
0000a4 d19e      	RCALL __MODW21
0000a5 5de0      	SUBI R30,-LOW(48)
0000a6 01db      	MOVW R26,R22
0000a7 93ec      	ST   X,R30
0000a8 01da      	MOVW R26,R20
0000a9 e0ea      	LDI  R30,LOW(10)
0000aa e0f0      	LDI  R31,HIGH(10)
0000ab d169      	RCALL __DIVW21
0000ac 01af      	MOVW R20,R30
                +
0000ad 5f0f     +SUBI R16 , LOW ( - 1 )
0000ae 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0000af 2e04      	MOV  R0,R20
0000b0 2a05      	OR   R0,R21
0000b1 f749      	BRNE _0xB
0000b2 0198      	MOVW R18,R16
                 _0xE:
0000b3 2400      	CLR  R0
0000b4 1602      	CP   R0,R18
0000b5 0603      	CPC  R0,R19
0000b6 f45c      	BRGE _0xF
0000b7 01f9      	MOVW R30,R18
0000b8 9731      	SBIW R30,1
0000b9 01de      	MOVW R26,R28
0000ba 9616      	ADIW R26,6
0000bb 0fae      	ADD  R26,R30
0000bc 1fbf      	ADC  R27,R31
0000bd 91ac      	LD   R26,X
0000be dfb8      	RCALL _uart_transmit
                +
0000bf 5021     +SUBI R18 , LOW ( 1 )
0000c0 4030     +SBCI R19 , HIGH ( 1 )
                 	__SUBWRN 18,19,1
0000c1 cff1      	RJMP _0xE
                 _0xF:
0000c2 d10d      	RCALL __LOADLOCR6
0000c3 9660      	ADIW R28,16
0000c4 9508      	RET
                 ; .FEND
                 _uart_init:
                 ; .FSTART _uart_init
0000c5 e0e0      	LDI  R30,LOW(0)
0000c6 93e0 00c5 	STS  197,R30
0000c8 e6e7      	LDI  R30,LOW(103)
0000c9 93e0 00c4 	STS  196,R30
0000cb e0e6      	LDI  R30,LOW(6)
0000cc 93e0 00c2 	STS  194,R30
0000ce e9e8      	LDI  R30,LOW(152)
0000cf 93e0 00c1 	STS  193,R30
0000d1 9478      	SEI
0000d2 9508      	RET
                 ; .FEND
                 ;unsigned char onewire_reset(void) {
                 ; 0000 000D unsigned char onewire_reset(void) {
                 _onewire_reset:
                 ; .FSTART _onewire_reset
                 ; 0000 000E unsigned char i;
                 ; 0000 000F //Set connected pin as Output and put it low
                 ; 0000 0010 onewire_DDR |= (1<<onewire_DQ);
0000d3 931a      	ST   -Y,R17
                 ;	i -> R17
0000d4 9a52      	SBI  0xA,2
                 ; 0000 0011 onewire_PORT &= (~ (1<<onewire_DQ));
0000d5 985a      	CBI  0xB,2
                 ; 0000 0012 //low for 480us
                 ; 0000 0013 delay_us(480);
                +
0000d6 ec80     +LDI R24 , LOW ( 960 )
0000d7 e093     +LDI R25 , HIGH ( 960 )
                +__DELAY_USW_LOOP :
0000d8 9701     +SBIW R24 , 1
0000d9 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 960
                 ; 0000 0014 
                 ; 0000 0015 //release line but set connected pin as Input
                 ; 0000 0016 onewire_DDR &= ~(1<<onewire_DQ); //input
0000da 9852      	CBI  0xA,2
                 ; 0000 0017 //wait for 70uS
                 ; 0000 0018 delay_us(70);
                +
0000db eb8b     +LDI R24 , LOW ( 187 )
                +__DELAY_USB_LOOP :
0000dc 958a     +DEC R24
0000dd f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 187
                 ; 0000 0019 
                 ; 0000 001A //get value and wait 410us
                 ; 0000 001B i = (onewire_PIN & (1<<onewire_DQ));
0000de b1e9      	IN   R30,0x9
0000df 70e4      	ANDI R30,LOW(0x4)
0000e0 2f1e      	MOV  R17,R30
                 ; 0000 001C delay_us(410);
                +
0000e1 e384     +LDI R24 , LOW ( 820 )
0000e2 e093     +LDI R25 , HIGH ( 820 )
                +__DELAY_USW_LOOP :
0000e3 9701     +SBIW R24 , 1
0000e4 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 820
                 ; 0000 001D 
                 ; 0000 001E //return the read value,
                 ; 0000 001F //0= device on bus, 1= no device on bus
                 ; 0000 0020 return i;
0000e5 c01c      	RJMP _0x2000003
                 ; 0000 0021 }
                 ; .FEND
                 ;void onewire_writebit(unsigned char b){
                 ; 0000 0025 void onewire_writebit(unsigned char b){
                 _onewire_writebit:
                 ; .FSTART _onewire_writebit
                 ; 0000 0026 //low for 6uS
                 ; 0000 0027 onewire_DDR |= (1<<onewire_DQ); //output
0000e6 931a      	ST   -Y,R17
0000e7 2f1a      	MOV  R17,R26
                 ;	b -> R17
0000e8 9a52      	SBI  0xA,2
                 ; 0000 0028 onewire_PORT &= ~ (1<<onewire_DQ); //low
0000e9 985a      	CBI  0xB,2
                 ; 0000 0029 delay_us(6);
                +
0000ea e180     +LDI R24 , LOW ( 16 )
                +__DELAY_USB_LOOP :
0000eb 958a     +DEC R24
0000ec f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 16
                 ; 0000 002A 
                 ; 0000 002B //if we want to write 1, release the line
                 ; 0000 002C //if not keep it low)
                 ; 0000 002D if(b)
0000ed 3010      	CPI  R17,0
0000ee f009      	BREQ _0x10
                 ; 0000 002E onewire_DDR &= ~(1<<onewire_DQ); //input
0000ef 9852      	CBI  0xA,2
                 ; 0000 002F 
                 ; 0000 0030 //wait 54uS and release the line
                 ; 0000 0031 delay_us(54);
                 _0x10:
                +
0000f0 e980     +LDI R24 , LOW ( 144 )
                +__DELAY_USB_LOOP :
0000f1 958a     +DEC R24
0000f2 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 144
                 ; 0000 0032 onewire_DDR &= ~(1<<onewire_DQ); //input
0000f3 d0be      	RCALL SUBOPT_0x0
                 ; 0000 0033 //wait for another 10us
                 ; 0000 0034 delay_us(10);
                 ; 0000 0035 }
0000f4 c00e      	RJMP _0x2000002
                 ; .FEND
                 ;unsigned char onewire_readbit(void){
                 ; 0000 0039 unsigned char onewire_readbit(void){
                 _onewire_readbit:
                 ; .FSTART _onewire_readbit
                 ; 0000 003A unsigned char b=0;
                 ; 0000 003B 
                 ; 0000 003C //low for 5uS
                 ; 0000 003D onewire_PORT &= ~ (1<<onewire_DQ); //low
0000f5 931a      	ST   -Y,R17
                 ;	b -> R17
0000f6 e010      	LDI  R17,0
0000f7 985a      	CBI  0xB,2
                 ; 0000 003E onewire_DDR |= (1<<onewire_DQ); //output
0000f8 9a52      	SBI  0xA,2
                 ; 0000 003F delay_us(5);
                +
0000f9 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000fa 958a     +DEC R24
0000fb f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
                 ; 0000 0040 
                 ; 0000 0041 //release line and wait for 15uS
                 ; 0000 0042 onewire_DDR &= ~(1<<onewire_DQ); //input
0000fc d0b5      	RCALL SUBOPT_0x0
                 ; 0000 0043 delay_us(10);
                 ; 0000 0044 
                 ; 0000 0045 //read the value
                 ; 0000 0046 if(onewire_PIN & (1<<onewire_DQ))
0000fd 994a      	SBIC 0x9,2
                 ; 0000 0047 b=1;
0000fe e011      	LDI  R17,LOW(1)
                 ; 0000 0048 
                 ; 0000 0049 //wait 55uS and return read value
                 ; 0000 004A delay_us(55);
                +
0000ff e983     +LDI R24 , LOW ( 147 )
                +__DELAY_USB_LOOP :
000100 958a     +DEC R24
000101 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 147
                 ; 0000 004B return b;
                 _0x2000003:
000102 2fe1      	MOV  R30,R17
                 _0x2000002:
000103 9119      	LD   R17,Y+
000104 9508      	RET
                 ; 0000 004C }
                 ; .FEND
                 ;void onewire_writebyte(unsigned char byte){
                 ; 0000 0051 void onewire_writebyte(unsigned char byte){
                 _onewire_writebyte:
                 ; .FSTART _onewire_writebyte
                 ; 0000 0052 unsigned char i=8;
                 ; 0000 0053 while(i--){
000105 931a      	ST   -Y,R17
000106 930a      	ST   -Y,R16
000107 2f0a      	MOV  R16,R26
                 ;	byte -> R16
                 ;	i -> R17
000108 e018      	LDI  R17,8
                 _0x12:
000109 2fe1      	MOV  R30,R17
00010a 5011      	SUBI R17,1
00010b 30e0      	CPI  R30,0
00010c f031      	BREQ _0x14
                 ; 0000 0054 onewire_writebit(byte&1);
00010d 2fe0      	MOV  R30,R16
00010e 70e1      	ANDI R30,LOW(0x1)
00010f 2fae      	MOV  R26,R30
000110 dfd5      	RCALL _onewire_writebit
                 ; 0000 0055 byte >>= 1;
000111 9506      	LSR  R16
                 ; 0000 0056 }
000112 cff6      	RJMP _0x12
                 _0x14:
                 ; 0000 0057 }
000113 c010      	RJMP _0x2000001
                 ; .FEND
                 ;unsigned char onewire_readbyte(void){
                 ; 0000 005C unsigned char onewire_readbyte(void){
                 _onewire_readbyte:
                 ; .FSTART _onewire_readbyte
                 ; 0000 005D unsigned char i=8, data=0;
                 ; 0000 005E while(i--){
000114 931a      	ST   -Y,R17
000115 930a      	ST   -Y,R16
                 ;	i -> R17
                 ;	data -> R16
000116 e018      	LDI  R17,8
000117 e000      	LDI  R16,0
                 _0x15:
000118 2fe1      	MOV  R30,R17
000119 5011      	SUBI R17,1
00011a 30e0      	CPI  R30,0
00011b f039      	BREQ _0x17
                 ; 0000 005F data >>= 1;
00011c 9506      	LSR  R16
                 ; 0000 0060 data |= (onewire_readbit()<<7);
00011d dfd7      	RCALL _onewire_readbit
00011e 95e7      	ROR  R30
00011f e0e0      	LDI  R30,0
000120 95e7      	ROR  R30
000121 2b0e      	OR   R16,R30
                 ; 0000 0061 }
000122 cff5      	RJMP _0x15
                 _0x17:
                 ; 0000 0062 return data;
000123 2fe0      	MOV  R30,R16
                 _0x2000001:
000124 9109      	LD   R16,Y+
000125 9119      	LD   R17,Y+
000126 9508      	RET
                 ; 0000 0063 }
                 ; .FEND
                 ;float ds18b20_gettemp() {
                 ; 0000 0068 float ds18b20_gettemp() {
                 _ds18b20_gettemp:
                 ; .FSTART _ds18b20_gettemp
                 ; 0000 0069 long temperature_l;
                 ; 0000 006A long temperature_h;
                 ; 0000 006B float retd = 0;
                 ; 0000 006C 
                 ; 0000 006D #if onewire_STOPINTERRUPTONREAD == 1
                 ; 0000 006E #asm ("cli")
000127 972c      	SBIW R28,12
000128 e0e0      	LDI  R30,LOW(0)
000129 83e8      	ST   Y,R30
00012a 83e9      	STD  Y+1,R30
00012b 83ea      	STD  Y+2,R30
00012c 83eb      	STD  Y+3,R30
                 ;	temperature_l -> Y+8
                 ;	temperature_h -> Y+4
                 ;	retd -> Y+0
00012d 94f8      	CLI
                 ; 0000 006F #endif
                 ; 0000 0070 
                 ; 0000 0071 onewire_reset(); //reset
00012e dfa4      	RCALL _onewire_reset
                 ; 0000 0072 onewire_writebyte(onewire_CMD_SKIPROM); //skip ROM
00012f ecac      	LDI  R26,LOW(204)
000130 dfd4      	RCALL _onewire_writebyte
                 ; 0000 0073 onewire_writebyte(DS18B20_CMD_CONVERTTEMP); //start temperature conversion
000131 e4a4      	LDI  R26,LOW(68)
000132 dfd2      	RCALL _onewire_writebyte
                 ; 0000 0074 
                 ; 0000 0075 while(!onewire_readbit()); //wait until conversion is complete
                 _0x18:
000133 dfc1      	RCALL _onewire_readbit
000134 30e0      	CPI  R30,0
000135 f3e9      	BREQ _0x18
                 ; 0000 0076 
                 ; 0000 0077 onewire_reset(); //reset
000136 df9c      	RCALL _onewire_reset
                 ; 0000 0078 onewire_writebyte(onewire_CMD_SKIPROM); //skip ROM
000137 ecac      	LDI  R26,LOW(204)
000138 dfcc      	RCALL _onewire_writebyte
                 ; 0000 0079 onewire_writebyte(DS18B20_CMD_RSCRATCHPAD); //read scratchpad
000139 ebae      	LDI  R26,LOW(190)
00013a dfca      	RCALL _onewire_writebyte
                 ; 0000 007A 
                 ; 0000 007B //read 2 byte from scratchpad
                 ; 0000 007C temperature_l = onewire_readbyte();
00013b d07b      	RCALL SUBOPT_0x1
                +
00013c 87e8     +STD Y + 8 , R30
00013d 87f9     +STD Y + 8 + 1 , R31
00013e 876a     +STD Y + 8 + 2 , R22
00013f 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
                 ; 0000 007D temperature_h = onewire_readbyte();
000140 d076      	RCALL SUBOPT_0x1
                +
000141 83ec     +STD Y + 4 , R30
000142 83fd     +STD Y + 4 + 1 , R31
000143 836e     +STD Y + 4 + 2 , R22
000144 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
                 ; 0000 007E 
                 ; 0000 007F #if onewire_STOPINTERRUPTONREAD == 1
                 ; 0000 0080 #asm ("sei")
000145 9478      	SEI
                 ; 0000 0081 #endif
                 ; 0000 0082 
                 ; 0000 0083 //convert the 12 bit value obtained
                 ; 0000 0084 retd = ( ( temperature_h << 8 ) + temperature_l ) * 0.0625;
                +
000146 81ac     +LDD R26 , Y + 4
000147 81bd     +LDD R27 , Y + 4 + 1
000148 818e     +LDD R24 , Y + 4 + 2
000149 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
00014a e0e8      	LDI  R30,LOW(8)
00014b d09f      	RCALL __LSLD12
                +
00014c 85a8     +LDD R26 , Y + 8
00014d 85b9     +LDD R27 , Y + 8 + 1
00014e 858a     +LDD R24 , Y + 8 + 2
00014f 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
                +
000150 0fea     +ADD R30 , R26
000151 1ffb     +ADC R31 , R27
000152 1f68     +ADC R22 , R24
000153 1f79     +ADC R23 , R25
                 	__ADDD12
000154 d189      	RCALL __CDF1
                +
000155 e0a0     +LDI R26 , LOW ( 0x3D800000 )
000156 e0b0     +LDI R27 , HIGH ( 0x3D800000 )
000157 e880     +LDI R24 , BYTE3 ( 0x3D800000 )
000158 e39d     +LDI R25 , BYTE4 ( 0x3D800000 )
                 	__GETD2N 0x3D800000
000159 d1b1      	RCALL __MULF12
                +
00015a 83e8     +STD Y + 0 , R30
00015b 83f9     +STD Y + 0 + 1 , R31
00015c 836a     +STD Y + 0 + 2 , R22
00015d 837b     +STD Y + 0 + 3 , R23
                 	__PUTD1S 0
                 ; 0000 0085 
                 ; 0000 0086 return retd;
00015e 962c      	ADIW R28,12
00015f 9508      	RET
                 ; 0000 0087 }
                 ; .FEND
                 ;void main(void)
                 ; 0000 008D {
                 _main:
                 ; .FSTART _main
                 ; 0000 008E uart_init();
000160 df64      	RCALL _uart_init
                 ; 0000 008F while(1) {
                 _0x1B:
                 ; 0000 0090 
                 ; 0000 0091 temperature = ds18b20_gettemp();
000161 dfc5      	RCALL _ds18b20_gettemp
000162 93e0 031f 	STS  _temperature,R30
000164 93f0 0320 	STS  _temperature+1,R31
000166 9360 0321 	STS  _temperature+2,R22
000168 9370 0322 	STS  _temperature+3,R23
                 ; 0000 0092 temp_value = (long)(temperature*1000);
00016a 91a0 031f 	LDS  R26,_temperature
00016c 91b0 0320 	LDS  R27,_temperature+1
00016e 9180 0321 	LDS  R24,_temperature+2
000170 9190 0322 	LDS  R25,_temperature+3
                +
000172 e0e0     +LDI R30 , LOW ( 0x447A0000 )
000173 e0f0     +LDI R31 , HIGH ( 0x447A0000 )
000174 e76a     +LDI R22 , BYTE3 ( 0x447A0000 )
000175 e474     +LDI R23 , BYTE4 ( 0x447A0000 )
                 	__GETD1N 0x447A0000
000176 d194      	RCALL __MULF12
000177 d12f      	RCALL __CFD1
000178 93e0 0313 	STS  _temp_value,R30
00017a 93f0 0314 	STS  _temp_value+1,R31
00017c 9360 0315 	STS  _temp_value+2,R22
00017e 9370 0316 	STS  _temp_value+3,R23
                 ; 0000 0093 temp_int = temp_value/1000;
000180 d03b      	RCALL SUBOPT_0x2
000181 d0bc      	RCALL __DIVD21
000182 93e0 0317 	STS  _temp_int,R30
000184 93f0 0318 	STS  _temp_int+1,R31
000186 9360 0319 	STS  _temp_int+2,R22
000188 9370 031a 	STS  _temp_int+3,R23
                 ; 0000 0094 temp_dec = temp_value%1000;
00018a d031      	RCALL SUBOPT_0x2
00018b d0c5      	RCALL __MODD21
00018c 93e0 031b 	STS  _temp_dec,R30
00018e 93f0 031c 	STS  _temp_dec+1,R31
000190 9360 031d 	STS  _temp_dec+2,R22
000192 9370 031e 	STS  _temp_dec+3,R23
                 ; 0000 0095 
                 ; 0000 0096 putstring("Temperature: ");
                +
000194 e0a0     +LDI R26 , LOW ( _0x1E + ( 0 ) )
000195 e0b3     +LDI R27 , HIGH ( _0x1E + ( 0 ) )
                 	__POINTW2MN _0x1E,0
000196 dee9      	RCALL _putstring
                 ; 0000 0097 putint(temperature);
000197 91e0 031f 	LDS  R30,_temperature
000199 91f0 0320 	LDS  R31,_temperature+1
00019b 9160 0321 	LDS  R22,_temperature+2
00019d 9170 0322 	LDS  R23,_temperature+3
00019f d105      	RCALL __CFD1U
0001a0 01df      	MOVW R26,R30
0001a1 def1      	RCALL _putint
                 ; 0000 0098 putstring(".");
                +
0001a2 e0ae     +LDI R26 , LOW ( _0x1E + ( 14 ) )
0001a3 e0b3     +LDI R27 , HIGH ( _0x1E + ( 14 ) )
                 	__POINTW2MN _0x1E,14
0001a4 dedb      	RCALL _putstring
                 ; 0000 0099 putint(temp_dec);
0001a5 91a0 031b 	LDS  R26,_temp_dec
0001a7 91b0 031c 	LDS  R27,_temp_dec+1
0001a9 dee9      	RCALL _putint
                 ; 0000 009A putstring("C\n");
                +
0001aa e1a0     +LDI R26 , LOW ( _0x1E + ( 16 ) )
0001ab e0b3     +LDI R27 , HIGH ( _0x1E + ( 16 ) )
                 	__POINTW2MN _0x1E,16
0001ac ded3      	RCALL _putstring
                 ; 0000 009B 
                 ; 0000 009C delay_ms(1000);
0001ad eea8      	LDI  R26,LOW(1000)
0001ae e0b3      	LDI  R27,HIGH(1000)
0001af d1a9      	RCALL _delay_ms
                 ; 0000 009D }
0001b0 cfb0      	RJMP _0x1B
                 ; 0000 009E }
                 _0x1F:
0001b1 cfff      	RJMP _0x1F
                 ; .FEND
                 
                 	.DSEG
                 _0x1E:
000300           	.BYTE 0x13
                 
                 	.DSEG
                 _temp_value:
000313           	.BYTE 0x4
                 _temp_int:
000317           	.BYTE 0x4
                 _temp_dec:
00031b           	.BYTE 0x4
                 _temperature:
00031f           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0001b2 9852      	CBI  0xA,2
                +
0001b3 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0001b4 958a     +DEC R24
0001b5 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
0001b6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
0001b7 df5c      	RCALL _onewire_readbyte
0001b8 27ff      	CLR  R31
0001b9 2766      	CLR  R22
0001ba 2777      	CLR  R23
0001bb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2:
0001bc 91a0 0313 	LDS  R26,_temp_value
0001be 91b0 0314 	LDS  R27,_temp_value+1
0001c0 9180 0315 	LDS  R24,_temp_value+2
0001c2 9190 0316 	LDS  R25,_temp_value+3
                +
0001c4 eee8     +LDI R30 , LOW ( 0x3E8 )
0001c5 e0f3     +LDI R31 , HIGH ( 0x3E8 )
0001c6 e060     +LDI R22 , BYTE3 ( 0x3E8 )
0001c7 e070     +LDI R23 , BYTE4 ( 0x3E8 )
                 	__GETD1N 0x3E8
0001c8 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
0001c9 935a      	ST   -Y,R21
                 __SAVELOCR5:
0001ca 934a      	ST   -Y,R20
                 __SAVELOCR4:
0001cb 933a      	ST   -Y,R19
                 __SAVELOCR3:
0001cc 932a      	ST   -Y,R18
                 __SAVELOCR2:
0001cd 931a      	ST   -Y,R17
0001ce 930a      	ST   -Y,R16
0001cf 9508      	RET
                 
                 __LOADLOCR6:
0001d0 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0001d1 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0001d2 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0001d3 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0001d4 8119      	LDD  R17,Y+1
0001d5 8108      	LD   R16,Y
0001d6 9508      	RET
                 
                 __ANEGW1:
0001d7 95f1      	NEG  R31
0001d8 95e1      	NEG  R30
0001d9 40f0      	SBCI R31,0
0001da 9508      	RET
                 
                 __ANEGD1:
0001db 95f0      	COM  R31
0001dc 9560      	COM  R22
0001dd 9570      	COM  R23
0001de 95e1      	NEG  R30
0001df 4fff      	SBCI R31,-1
0001e0 4f6f      	SBCI R22,-1
0001e1 4f7f      	SBCI R23,-1
0001e2 9508      	RET
                 
                 __ANEGD2:
0001e3 95b0      	COM  R27
0001e4 9580      	COM  R24
0001e5 9590      	COM  R25
0001e6 95a1      	NEG  R26
0001e7 4fbf      	SBCI R27,-1
0001e8 4f8f      	SBCI R24,-1
0001e9 4f9f      	SBCI R25,-1
0001ea 9508      	RET
                 
                 __LSLD12:
0001eb 23ee      	TST  R30
0001ec 2e0e      	MOV  R0,R30
0001ed e0e8      	LDI  R30,8
0001ee 2e1e      	MOV  R1,R30
0001ef 01fd      	MOVW R30,R26
0001f0 01bc      	MOVW R22,R24
0001f1 f079      	BREQ __LSLD12R
                 __LSLD12S8:
0001f2 1401      	CP   R0,R1
0001f3 f038      	BRLO __LSLD12L
0001f4 2f76      	MOV  R23,R22
0001f5 2f6f      	MOV  R22,R31
0001f6 2ffe      	MOV  R31,R30
0001f7 e0e0      	LDI  R30,0
0001f8 1801      	SUB  R0,R1
0001f9 f7c1      	BRNE __LSLD12S8
0001fa 9508      	RET
                 __LSLD12L:
0001fb 0fee      	LSL  R30
0001fc 1fff      	ROL  R31
0001fd 1f66      	ROL  R22
0001fe 1f77      	ROL  R23
0001ff 940a      	DEC  R0
000200 f7d1      	BRNE __LSLD12L
                 __LSLD12R:
000201 9508      	RET
                 
                 __DIVW21U:
000202 2400      	CLR  R0
000203 2411      	CLR  R1
000204 e190      	LDI  R25,16
                 __DIVW21U1:
000205 0faa      	LSL  R26
000206 1fbb      	ROL  R27
000207 1c00      	ROL  R0
000208 1c11      	ROL  R1
000209 1a0e      	SUB  R0,R30
00020a 0a1f      	SBC  R1,R31
00020b f418      	BRCC __DIVW21U2
00020c 0e0e      	ADD  R0,R30
00020d 1e1f      	ADC  R1,R31
00020e c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00020f 60a1      	SBR  R26,1
                 __DIVW21U3:
000210 959a      	DEC  R25
000211 f799      	BRNE __DIVW21U1
000212 01fd      	MOVW R30,R26
000213 01d0      	MOVW R26,R0
000214 9508      	RET
                 
                 __DIVW21:
000215 d048      	RCALL __CHKSIGNW
000216 dfeb      	RCALL __DIVW21U
000217 f40e      	BRTC __DIVW211
000218 dfbe      	RCALL __ANEGW1
                 __DIVW211:
000219 9508      	RET
                 
                 __DIVD21U:
00021a 933f      	PUSH R19
00021b 934f      	PUSH R20
00021c 935f      	PUSH R21
00021d 2400      	CLR  R0
00021e 2411      	CLR  R1
00021f 01a0      	MOVW R20,R0
000220 e230      	LDI  R19,32
                 __DIVD21U1:
000221 0faa      	LSL  R26
000222 1fbb      	ROL  R27
000223 1f88      	ROL  R24
000224 1f99      	ROL  R25
000225 1c00      	ROL  R0
000226 1c11      	ROL  R1
000227 1f44      	ROL  R20
000228 1f55      	ROL  R21
000229 1a0e      	SUB  R0,R30
00022a 0a1f      	SBC  R1,R31
00022b 0b46      	SBC  R20,R22
00022c 0b57      	SBC  R21,R23
00022d f428      	BRCC __DIVD21U2
00022e 0e0e      	ADD  R0,R30
00022f 1e1f      	ADC  R1,R31
000230 1f46      	ADC  R20,R22
000231 1f57      	ADC  R21,R23
000232 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
000233 60a1      	SBR  R26,1
                 __DIVD21U3:
000234 953a      	DEC  R19
000235 f759      	BRNE __DIVD21U1
000236 01fd      	MOVW R30,R26
000237 01bc      	MOVW R22,R24
000238 01d0      	MOVW R26,R0
000239 01ca      	MOVW R24,R20
00023a 915f      	POP  R21
00023b 914f      	POP  R20
00023c 913f      	POP  R19
00023d 9508      	RET
                 
                 __DIVD21:
00023e d02d      	RCALL __CHKSIGND
00023f dfda      	RCALL __DIVD21U
000240 f40e      	BRTC __DIVD211
000241 df99      	RCALL __ANEGD1
                 __DIVD211:
000242 9508      	RET
                 
                 __MODW21:
000243 94e8      	CLT
000244 ffb7      	SBRS R27,7
000245 c004      	RJMP __MODW211
000246 95b1      	NEG  R27
000247 95a1      	NEG  R26
000248 40b0      	SBCI R27,0
000249 9468      	SET
                 __MODW211:
00024a fdf7      	SBRC R31,7
00024b df8b      	RCALL __ANEGW1
00024c dfb5      	RCALL __DIVW21U
00024d 01fd      	MOVW R30,R26
00024e f40e      	BRTC __MODW212
00024f df87      	RCALL __ANEGW1
                 __MODW212:
000250 9508      	RET
                 
                 __MODD21:
000251 94e8      	CLT
000252 ff97      	SBRS R25,7
000253 c002      	RJMP __MODD211
000254 df8e      	RCALL __ANEGD2
000255 9468      	SET
                 __MODD211:
000256 fd77      	SBRC R23,7
000257 df83      	RCALL __ANEGD1
000258 dfc1      	RCALL __DIVD21U
000259 01fd      	MOVW R30,R26
00025a 01bc      	MOVW R22,R24
00025b f40e      	BRTC __MODD212
00025c df7e      	RCALL __ANEGD1
                 __MODD212:
00025d 9508      	RET
                 
                 __CHKSIGNW:
00025e 94e8      	CLT
00025f fff7      	SBRS R31,7
000260 c002      	RJMP __CHKSW1
000261 df75      	RCALL __ANEGW1
000262 9468      	SET
                 __CHKSW1:
000263 ffb7      	SBRS R27,7
000264 c006      	RJMP __CHKSW2
000265 95b1      	NEG  R27
000266 95a1      	NEG  R26
000267 40b0      	SBCI R27,0
000268 f800      	BLD  R0,0
000269 9403      	INC  R0
00026a fa00      	BST  R0,0
                 __CHKSW2:
00026b 9508      	RET
                 
                 __CHKSIGND:
00026c 94e8      	CLT
00026d ff77      	SBRS R23,7
00026e c002      	RJMP __CHKSD1
00026f df6b      	RCALL __ANEGD1
000270 9468      	SET
                 __CHKSD1:
000271 ff97      	SBRS R25,7
000272 c004      	RJMP __CHKSD2
000273 df6f      	RCALL __ANEGD2
000274 f800      	BLD  R0,0
000275 9403      	INC  R0
000276 fa00      	BST  R0,0
                 __CHKSD2:
000277 9508      	RET
                 
                 __ROUND_REPACK:
000278 2355      	TST  R21
000279 f442      	BRPL __REPACK
00027a 3850      	CPI  R21,0x80
00027b f411      	BRNE __ROUND_REPACK0
00027c ffe0      	SBRS R30,0
00027d c004      	RJMP __REPACK
                 __ROUND_REPACK0:
00027e 9631      	ADIW R30,1
00027f 1f69      	ADC  R22,R25
000280 1f79      	ADC  R23,R25
000281 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000282 e850      	LDI  R21,0x80
000283 2757      	EOR  R21,R23
000284 f411      	BRNE __REPACK0
000285 935f      	PUSH R21
000286 c073      	RJMP __ZERORES
                 __REPACK0:
000287 3f5f      	CPI  R21,0xFF
000288 f031      	BREQ __REPACK1
000289 0f66      	LSL  R22
00028a 0c00      	LSL  R0
00028b 9557      	ROR  R21
00028c 9567      	ROR  R22
00028d 2f75      	MOV  R23,R21
00028e 9508      	RET
                 __REPACK1:
00028f 935f      	PUSH R21
000290 2000      	TST  R0
000291 f00a      	BRMI __REPACK2
000292 c072      	RJMP __MAXRES
                 __REPACK2:
000293 c06b      	RJMP __MINRES
                 
                 __UNPACK:
000294 e850      	LDI  R21,0x80
000295 2e19      	MOV  R1,R25
000296 2215      	AND  R1,R21
000297 0f88      	LSL  R24
000298 1f99      	ROL  R25
000299 2795      	EOR  R25,R21
00029a 0f55      	LSL  R21
00029b 9587      	ROR  R24
                 
                 __UNPACK1:
00029c e850      	LDI  R21,0x80
00029d 2e07      	MOV  R0,R23
00029e 2205      	AND  R0,R21
00029f 0f66      	LSL  R22
0002a0 1f77      	ROL  R23
0002a1 2775      	EOR  R23,R21
0002a2 0f55      	LSL  R21
0002a3 9567      	ROR  R22
0002a4 9508      	RET
                 
                 __CFD1U:
0002a5 9468      	SET
0002a6 c001      	RJMP __CFD1U0
                 __CFD1:
0002a7 94e8      	CLT
                 __CFD1U0:
0002a8 935f      	PUSH R21
0002a9 dff2      	RCALL __UNPACK1
0002aa 3870      	CPI  R23,0x80
0002ab f018      	BRLO __CFD10
0002ac 3f7f      	CPI  R23,0xFF
0002ad f408      	BRCC __CFD10
0002ae c04b      	RJMP __ZERORES
                 __CFD10:
0002af e156      	LDI  R21,22
0002b0 1b57      	SUB  R21,R23
0002b1 f4aa      	BRPL __CFD11
0002b2 9551      	NEG  R21
0002b3 3058      	CPI  R21,8
0002b4 f40e      	BRTC __CFD19
0002b5 3059      	CPI  R21,9
                 __CFD19:
0002b6 f030      	BRLO __CFD17
0002b7 efef      	SER  R30
0002b8 efff      	SER  R31
0002b9 ef6f      	SER  R22
0002ba e77f      	LDI  R23,0x7F
0002bb f977      	BLD  R23,7
0002bc c01a      	RJMP __CFD15
                 __CFD17:
0002bd 2777      	CLR  R23
0002be 2355      	TST  R21
0002bf f0b9      	BREQ __CFD15
                 __CFD18:
0002c0 0fee      	LSL  R30
0002c1 1fff      	ROL  R31
0002c2 1f66      	ROL  R22
0002c3 1f77      	ROL  R23
0002c4 955a      	DEC  R21
0002c5 f7d1      	BRNE __CFD18
0002c6 c010      	RJMP __CFD15
                 __CFD11:
0002c7 2777      	CLR  R23
                 __CFD12:
0002c8 3058      	CPI  R21,8
0002c9 f028      	BRLO __CFD13
0002ca 2fef      	MOV  R30,R31
0002cb 2ff6      	MOV  R31,R22
0002cc 2f67      	MOV  R22,R23
0002cd 5058      	SUBI R21,8
0002ce cff9      	RJMP __CFD12
                 __CFD13:
0002cf 2355      	TST  R21
0002d0 f031      	BREQ __CFD15
                 __CFD14:
0002d1 9576      	LSR  R23
0002d2 9567      	ROR  R22
0002d3 95f7      	ROR  R31
0002d4 95e7      	ROR  R30
0002d5 955a      	DEC  R21
0002d6 f7d1      	BRNE __CFD14
                 __CFD15:
0002d7 2000      	TST  R0
0002d8 f40a      	BRPL __CFD16
0002d9 df01      	RCALL __ANEGD1
                 __CFD16:
0002da 915f      	POP  R21
0002db 9508      	RET
                 
                 __CDF1U:
0002dc 9468      	SET
0002dd c001      	RJMP __CDF1U0
                 __CDF1:
0002de 94e8      	CLT
                 __CDF1U0:
0002df 9730      	SBIW R30,0
0002e0 4060      	SBCI R22,0
0002e1 4070      	SBCI R23,0
0002e2 f0b1      	BREQ __CDF10
0002e3 2400      	CLR  R0
0002e4 f026      	BRTS __CDF11
0002e5 2377      	TST  R23
0002e6 f412      	BRPL __CDF11
0002e7 9400      	COM  R0
0002e8 def2      	RCALL __ANEGD1
                 __CDF11:
0002e9 2e17      	MOV  R1,R23
0002ea e17e      	LDI  R23,30
0002eb 2011      	TST  R1
                 __CDF12:
0002ec f032      	BRMI __CDF13
0002ed 957a      	DEC  R23
0002ee 0fee      	LSL  R30
0002ef 1fff      	ROL  R31
0002f0 1f66      	ROL  R22
0002f1 1c11      	ROL  R1
0002f2 cff9      	RJMP __CDF12
                 __CDF13:
0002f3 2fef      	MOV  R30,R31
0002f4 2ff6      	MOV  R31,R22
0002f5 2d61      	MOV  R22,R1
0002f6 935f      	PUSH R21
0002f7 df8a      	RCALL __REPACK
0002f8 915f      	POP  R21
                 __CDF10:
0002f9 9508      	RET
                 
                 __ZERORES:
0002fa 27ee      	CLR  R30
0002fb 27ff      	CLR  R31
0002fc 01bf      	MOVW R22,R30
0002fd 915f      	POP  R21
0002fe 9508      	RET
                 
                 __MINRES:
0002ff efef      	SER  R30
000300 efff      	SER  R31
000301 e76f      	LDI  R22,0x7F
000302 ef7f      	SER  R23
000303 915f      	POP  R21
000304 9508      	RET
                 
                 __MAXRES:
000305 efef      	SER  R30
000306 efff      	SER  R31
000307 e76f      	LDI  R22,0x7F
000308 e77f      	LDI  R23,0x7F
000309 915f      	POP  R21
00030a 9508      	RET
                 
                 __MULF12:
00030b 935f      	PUSH R21
00030c df87      	RCALL __UNPACK
00030d 3870      	CPI  R23,0x80
00030e f359      	BREQ __ZERORES
00030f 3890      	CPI  R25,0x80
000310 f349      	BREQ __ZERORES
000311 2401      	EOR  R0,R1
000312 9408      	SEC
000313 1f79      	ADC  R23,R25
000314 f423      	BRVC __MULF124
000315 f324      	BRLT __ZERORES
                 __MULF125:
000316 2000      	TST  R0
000317 f33a      	BRMI __MINRES
000318 cfec      	RJMP __MAXRES
                 __MULF124:
000319 920f      	PUSH R0
00031a 931f      	PUSH R17
00031b 932f      	PUSH R18
00031c 933f      	PUSH R19
00031d 934f      	PUSH R20
00031e 2711      	CLR  R17
00031f 2722      	CLR  R18
000320 2799      	CLR  R25
000321 9f68      	MUL  R22,R24
000322 01a0      	MOVW R20,R0
000323 9f8f      	MUL  R24,R31
000324 2d30      	MOV  R19,R0
000325 0d41      	ADD  R20,R1
000326 1f59      	ADC  R21,R25
000327 9f6b      	MUL  R22,R27
000328 0d30      	ADD  R19,R0
000329 1d41      	ADC  R20,R1
00032a 1f59      	ADC  R21,R25
00032b 9f8e      	MUL  R24,R30
00032c d027      	RCALL __MULF126
00032d 9fbf      	MUL  R27,R31
00032e d025      	RCALL __MULF126
00032f 9f6a      	MUL  R22,R26
000330 d023      	RCALL __MULF126
000331 9fbe      	MUL  R27,R30
000332 d01d      	RCALL __MULF127
000333 9faf      	MUL  R26,R31
000334 d01b      	RCALL __MULF127
000335 9fae      	MUL  R26,R30
000336 0d11      	ADD  R17,R1
000337 1f29      	ADC  R18,R25
000338 1f39      	ADC  R19,R25
000339 1f49      	ADC  R20,R25
00033a 1f59      	ADC  R21,R25
00033b 2fe3      	MOV  R30,R19
00033c 2ff4      	MOV  R31,R20
00033d 2f65      	MOV  R22,R21
00033e 2f52      	MOV  R21,R18
00033f 914f      	POP  R20
000340 913f      	POP  R19
000341 912f      	POP  R18
000342 911f      	POP  R17
000343 900f      	POP  R0
000344 2366      	TST  R22
000345 f02a      	BRMI __MULF122
000346 0f55      	LSL  R21
000347 1fee      	ROL  R30
000348 1fff      	ROL  R31
000349 1f66      	ROL  R22
00034a c002      	RJMP __MULF123
                 __MULF122:
00034b 9573      	INC  R23
00034c f24b      	BRVS __MULF125
                 __MULF123:
00034d df2a      	RCALL __ROUND_REPACK
00034e 915f      	POP  R21
00034f 9508      	RET
                 
                 __MULF127:
000350 0d10      	ADD  R17,R0
000351 1d21      	ADC  R18,R1
000352 1f39      	ADC  R19,R25
000353 c002      	RJMP __MULF128
                 __MULF126:
000354 0d20      	ADD  R18,R0
000355 1d31      	ADC  R19,R1
                 __MULF128:
000356 1f49      	ADC  R20,R25
000357 1f59      	ADC  R21,R25
000358 9508      	RET
                 
                 _delay_ms:
000359 9610      	adiw r26,0
00035a f039      	breq __delay_ms1
                 __delay_ms0:
00035b 95a8      	wdr
                +
00035c ed80     +LDI R24 , LOW ( 0x7D0 )
00035d e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00035e 9701     +SBIW R24 , 1
00035f f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000360 9711      	sbiw r26,1
000361 f7c9      	brne __delay_ms0
                 __delay_ms1:
000362 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega328P register use summary:
r0 :  46 r1 :  24 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  21 r17:  33 r18:  13 r19:  16 r20:  22 r21:  53 r22:  49 r23:  46 
r24:  43 r25:  35 r26:  60 r27:  30 r28:   7 r29:   1 r30: 109 r31:  48 
x  :   8 y  :  53 z  :   7 
Registers used: 21 out of 35 (60.0%)

ATmega328P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  24 add   :  10 
adiw  :   6 and   :   2 andi  :   3 asr   :   0 bclr  :   0 bld   :   3 
brbc  :   0 brbs  :   0 brcc  :   3 brcs  :   0 break :   0 breq  :  15 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   4 
brlt  :   1 brmi  :   4 brne  :  23 brpl  :   4 brsh  :   0 brtc  :   5 
brts  :   1 brvc  :   1 brvs  :   2 bset  :   0 bst   :   2 call  :   0 
cbi   :   6 cbr   :   0 clc   :   0 clh   :   0 cli   :   2 cln   :   0 
clr   :  18 cls   :   0 clt   :   6 clv   :   0 clz   :   0 com   :   7 
cp    :   2 cpc   :   1 cpi   :  15 cpse  :   0 dec   :  13 des   :   0 
eor   :   4 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   1 inc   :   3 jmp   :  27 ld    :   8 ldd   :  15 ldi   :  82 
lds   :  15 lpm   :   7 lsl   :  12 lsr   :   3 mov   :  31 movw  :  31 
mul   :   9 muls  :   0 mulsu :   0 neg   :   9 nop   :   0 or    :   2 
ori   :   0 out   :   6 pop   :  14 push  :  13 rcall :  66 ret   :  33 
reti  :   0 rjmp  :  34 rol   :  24 ror   :   9 sbc   :   4 sbci  :  14 
sbi   :   3 sbic  :   1 sbis  :   0 sbiw  :  11 sbr   :   2 sbrc  :   2 
sbrs  :   7 sec   :   1 seh   :   0 sei   :   2 sen   :   0 ser   :   8 
ses   :   0 set   :   6 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  23 std   :  15 sts   :  21 sub   :   4 subi  :   7 swap  :   0 
tst   :  10 wdr   :   1 
Instructions used: 71 out of 116 (61.2%)

ATmega328P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0006c6   1694     40   1734   32768   5.3%
[.dseg] 0x000100 0x000323      0     35     35    2048   1.7%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 2 warnings
