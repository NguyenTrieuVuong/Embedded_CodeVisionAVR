;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	data -> R17
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;	*str -> R16,R17
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;	value -> Y+14
;	buf -> Y+6
;	index -> R16,R17
;	i -> R18,R19
;	j -> R20,R21
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;unsigned char onewire_reset(void) {
; 0000 000D unsigned char onewire_reset(void) {
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 000E unsigned char i;
; 0000 000F //Set connected pin as Output and put it low
; 0000 0010 onewire_DDR |= (1<<onewire_DQ);
;PCODE: $0000007C VOL: 0
;	i -> R17
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0011 onewire_PORT &= (~ (1<<onewire_DQ));
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0012 //low for 480us
; 0000 0013 delay_us(480);
;PCODE: $00000081 VOL: 0
; 0000 0014 
; 0000 0015 //release line but set connected pin as Input
; 0000 0016 onewire_DDR &= ~(1<<onewire_DQ); //input
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0017 //wait for 70uS
; 0000 0018 delay_us(70);
;PCODE: $00000084 VOL: 0
; 0000 0019 
; 0000 001A //get value and wait 410us
; 0000 001B i = (onewire_PIN & (1<<onewire_DQ));
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 001C delay_us(410);
;PCODE: $00000088 VOL: 0
; 0000 001D 
; 0000 001E //return the read value,
; 0000 001F //0= device on bus, 1= no device on bus
; 0000 0020 return i;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 0021 }
;PCODE: $0000008C VOL: 0
;void onewire_writebit(unsigned char b){
; 0000 0025 void onewire_writebit(unsigned char b){
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0026 //low for 6uS
; 0000 0027 onewire_DDR |= (1<<onewire_DQ); //output
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;	b -> R17
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0028 onewire_PORT &= ~ (1<<onewire_DQ); //low
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 0029 delay_us(6);
;PCODE: $00000095 VOL: 0
; 0000 002A 
; 0000 002B //if we want to write 1, release the line
; 0000 002C //if not keep it low)
; 0000 002D if(b)
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 002E onewire_DDR &= ~(1<<onewire_DQ); //input
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 002F 
; 0000 0030 //wait 54uS and release the line
; 0000 0031 delay_us(54);
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 0032 onewire_DDR &= ~(1<<onewire_DQ); //input
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0033 //wait for another 10us
; 0000 0034 delay_us(10);
;PCODE: $0000009E VOL: 0
; 0000 0035 }
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;unsigned char onewire_readbit(void){
; 0000 0039 unsigned char onewire_readbit(void){
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 003A unsigned char b=0;
; 0000 003B 
; 0000 003C //low for 5uS
; 0000 003D onewire_PORT &= ~ (1<<onewire_DQ); //low
;PCODE: $000000A4 VOL: 0
;	b -> R17
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 003E onewire_DDR |= (1<<onewire_DQ); //output
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 003F delay_us(5);
;PCODE: $000000AB VOL: 0
; 0000 0040 
; 0000 0041 //release line and wait for 15uS
; 0000 0042 onewire_DDR &= ~(1<<onewire_DQ); //input
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 0043 delay_us(10);
;PCODE: $000000AE VOL: 0
; 0000 0044 
; 0000 0045 //read the value
; 0000 0046 if(onewire_PIN & (1<<onewire_DQ))
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 0047 b=1;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 0048 
; 0000 0049 //wait 55uS and return read value
; 0000 004A delay_us(55);
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 004B return b;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 004C }
;PCODE: $000000B9 VOL: 0
;void onewire_writebyte(unsigned char byte){
; 0000 0051 void onewire_writebyte(unsigned char byte){
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 0052 unsigned char i=8;
; 0000 0053 while(i--){
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;	byte -> R16
;	i -> R17
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 0054 onewire_writebit(byte&1);
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 0055 byte >>= 1;
;PCODE: $000000CB VOL: 0
; 0000 0056 }
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 0057 }
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;unsigned char onewire_readbyte(void){
; 0000 005C unsigned char onewire_readbyte(void){
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 005D unsigned char i=8, data=0;
; 0000 005E while(i--){
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;	i -> R17
;	data -> R16
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 005F data >>= 1;
;PCODE: $000000DF VOL: 0
; 0000 0060 data |= (onewire_readbit()<<7);
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 0061 }
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 0062 return data;
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 0063 }
;PCODE: $000000E9 VOL: 0
;float ds18b20_gettemp() {
; 0000 0068 float ds18b20_gettemp() {
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 0069 long temperature_l;
; 0000 006A long temperature_h;
; 0000 006B float retd = 0;
; 0000 006C 
; 0000 006D #if onewire_STOPINTERRUPTONREAD == 1
; 0000 006E #asm ("cli")
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;	temperature_l -> Y+8
;	temperature_h -> Y+4
;	retd -> Y+0
;PCODE: $000000F5 VOL: 0
; 0000 006F #endif
; 0000 0070 
; 0000 0071 onewire_reset(); //reset
;PCODE: $000000F6 VOL: 0
; 0000 0072 onewire_writebyte(onewire_CMD_SKIPROM); //skip ROM
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 0073 onewire_writebyte(DS18B20_CMD_CONVERTTEMP); //start temperature conversion
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 0074 
; 0000 0075 while(!onewire_readbit()); //wait until conversion is complete
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 0076 
; 0000 0077 onewire_reset(); //reset
;PCODE: $00000101 VOL: 0
; 0000 0078 onewire_writebyte(onewire_CMD_SKIPROM); //skip ROM
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 0079 onewire_writebyte(DS18B20_CMD_RSCRATCHPAD); //read scratchpad
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 007A 
; 0000 007B //read 2 byte from scratchpad
; 0000 007C temperature_l = onewire_readbyte();
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 007D temperature_h = onewire_readbyte();
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 007E 
; 0000 007F #if onewire_STOPINTERRUPTONREAD == 1
; 0000 0080 #asm ("sei")
;PCODE: $0000010C VOL: 0
; 0000 0081 #endif
; 0000 0082 
; 0000 0083 //convert the 12 bit value obtained
; 0000 0084 retd = ( ( temperature_h << 8 ) + temperature_l ) * 0.0625;
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 0085 
; 0000 0086 return retd;
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 0087 }
;PCODE: $00000119 VOL: 0
;void main(void)
; 0000 008D {
;PCODE: $0000011A VOL: 0
; 0000 008E uart_init();
;PCODE: $0000011B VOL: 0
; 0000 008F while(1) {
;PCODE: $0000011C VOL: 0
; 0000 0090 
; 0000 0091 temperature = ds18b20_gettemp();
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 0092 temp_value = (long)(temperature*1000);
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 0093 temp_int = temp_value/1000;
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 0094 temp_dec = temp_value%1000;
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 0095 
; 0000 0096 putstring("Temperature: ");
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 0097 putint(temperature);
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 0098 putstring(".");
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 0099 putint(temp_dec);
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 009A putstring("C\n");
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 009B 
; 0000 009C delay_ms(1000);
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 009D }
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 009E }
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0

	.DSEG
_0x1E:
	.BYTE 0x13
